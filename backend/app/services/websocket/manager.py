"""
WebSocket Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ broadcasting
"""

import logging
import json
from typing import Dict, Set, Any
from fastapi import WebSocket

logger = logging.getLogger(__name__)


class ConnectionManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

    –§—É–Ω–∫—Ü–∏–∏:
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
    - Broadcasting —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
    - Broadcasting —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º (rooms)

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    ```python
    manager = ConnectionManager()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    await manager.connect(websocket, user_id="operator1")

    # Broadcasting –≤—Å–µ–º
    await manager.broadcast({"type": "order_update", "data": {...}})

    # Broadcasting –≤ –∫–æ–º–Ω–∞—Ç—É
    await manager.broadcast_to_room("orders", {"type": "new_order", ...})

    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    manager.disconnect(websocket)
    ```
    """

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è manager"""
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: WebSocket -> user_id
        self.active_connections: Dict[WebSocket, str] = {}

        # –ö–æ–º–Ω–∞—Ç—ã: room_name -> Set[WebSocket]
        self.rooms: Dict[str, Set[WebSocket]] = {}

    async def connect(self, websocket: WebSocket, user_id: str = None):
        """
        –ü–æ–¥–∫–ª—é—á–∏—Ç—å WebSocket –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            websocket: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        await websocket.accept()
        self.active_connections[websocket] = user_id or "anonymous"

        logger.info(
            f"üîå WebSocket connected: user={user_id or 'anonymous'}, "
            f"total={len(self.active_connections)}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await self.send_personal_message(websocket, {
            "type": "connected",
            "message": "Successfully connected to WebSocket",
            "user_id": user_id,
        })

    def disconnect(self, websocket: WebSocket):
        """
        –û—Ç–∫–ª—é—á–∏—Ç—å WebSocket –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            websocket: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        """
        user_id = self.active_connections.get(websocket, "unknown")

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if websocket in self.active_connections:
            del self.active_connections[websocket]

        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
        for room_sockets in self.rooms.values():
            room_sockets.discard(websocket)

        logger.info(
            f"üîå WebSocket disconnected: user={user_id}, "
            f"total={len(self.active_connections)}"
        )

    async def send_personal_message(self, websocket: WebSocket, message: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É

        Args:
            websocket: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            message: –°–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON)
        """
        try:
            await websocket.send_json(message)
        except Exception as e:
            logger.error(f"‚ùå Error sending personal message: {e}")
            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.disconnect(websocket)

    async def broadcast(self, message: Dict[str, Any], exclude: WebSocket = None):
        """
        Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON)
            exclude: –ò—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ broadcast (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        logger.debug(f"üì¢ Broadcasting to {len(self.active_connections)} clients: {message.get('type')}")

        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        disconnected = []

        for websocket in self.active_connections.keys():
            if websocket == exclude:
                continue

            try:
                await websocket.send_json(message)
            except Exception as e:
                logger.error(f"‚ùå Error broadcasting to client: {e}")
                disconnected.append(websocket)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket in disconnected:
            self.disconnect(websocket)

    def join_room(self, websocket: WebSocket, room: str):
        """
        –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É

        Args:
            websocket: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            room: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        """
        if room not in self.rooms:
            self.rooms[room] = set()

        self.rooms[room].add(websocket)

        user_id = self.active_connections.get(websocket, "unknown")
        logger.debug(f"üö™ User {user_id} joined room '{room}'")

    def leave_room(self, websocket: WebSocket, room: str):
        """
        –£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã

        Args:
            websocket: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            room: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
        """
        if room in self.rooms:
            self.rooms[room].discard(websocket)

            user_id = self.active_connections.get(websocket, "unknown")
            logger.debug(f"üö™ User {user_id} left room '{room}'")

    async def broadcast_to_room(self, room: str, message: Dict[str, Any]):
        """
        Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ

        Args:
            room: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
            message: –°–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON)
        """
        if room not in self.rooms:
            logger.debug(f"üì¢ Room '{room}' is empty, skipping broadcast")
            return

        sockets = list(self.rooms[room])
        logger.debug(f"üì¢ Broadcasting to room '{room}' ({len(sockets)} clients): {message.get('type')}")

        disconnected = []

        for websocket in sockets:
            try:
                await websocket.send_json(message)
            except Exception as e:
                logger.error(f"‚ùå Error broadcasting to room '{room}': {e}")
                disconnected.append(websocket)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket in disconnected:
            self.disconnect(websocket)

    def get_connections_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        return len(self.active_connections)

    def get_room_size(self, room: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ"""
        return len(self.rooms.get(room, set()))


# ============================================================================
# GLOBAL INSTANCE
# ============================================================================

# Global instance (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
manager = ConnectionManager()


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

async def broadcast_order_update(order_id: int, event_type: str, data: Dict[str, Any] = None):
    """
    Broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

    Args:
        order_id: ID –∑–∞–∫–∞–∑–∞
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (new_order, order_updated, order_cancelled, etc.)
        data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    message = {
        "type": "order_update",
        "event": event_type,
        "order_id": order_id,
        "data": data or {},
        "timestamp": None,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å timestamp
    }

    await manager.broadcast_to_room("orders", message)


async def broadcast_print_job_update(job_id: int, status: str, order_item_id: int = None):
    """
    Broadcast –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ print job

    Args:
        job_id: ID print job
        status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (QUEUED, PRINTING, DONE, FAILED)
        order_item_id: ID order item (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    message = {
        "type": "print_job_update",
        "job_id": job_id,
        "status": status,
        "order_item_id": order_item_id,
        "timestamp": None,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å timestamp
    }

    await manager.broadcast_to_room("orders", message)


async def broadcast_printer_status(online: bool, error: str = None):
    """
    Broadcast —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞

    Args:
        online: –ü—Ä–∏–Ω—Ç–µ—Ä –æ–Ω–ª–∞–π–Ω?
        error: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    message = {
        "type": "printer_status",
        "online": online,
        "error": error,
        "timestamp": None,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å timestamp
    }

    await manager.broadcast(message)
