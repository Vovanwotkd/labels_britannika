"""
RKeeper XML Parser
–ü–∞—Ä—Å–µ—Ä XML webhook –æ—Ç RKeeper (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏–π)
"""

import logging
from typing import Dict, List, Optional
from xml.etree import ElementTree as ET
from datetime import datetime

logger = logging.getLogger(__name__)


class RKeeperXMLParser:
    """
    –ü–∞—Ä—Å–µ—Ä XML webhook –æ—Ç RKeeper (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)

    RKeeper –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    ```xml
    <a name="Order Changed" DateTime="..." Situation="3" ...>
        <Order visit="617707056" orderIdent="256" ...>
            <Table id="1011163" code="5" name="5"/>
            <Waiter id="1000634" code="7764" name="–ê—Å—Å–∞—Ä"/>
            <Session uni="101" ...>
                <Dish id="1004496" code="2714" name="..." uni="4" quantity="1000" price="29800"/>
            </Session>
        </Order>
        <ChangeLog>
            <Dish id="1004496" code="2714" uni="4" oldvalue="0" newvalue="1000" new="1"/>
        </ChangeLog>
    </a>
    ```

    –°–æ–±—ã—Ç–∏—è (name):
    - "New Order" - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    - "Open Order" - –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
    - "Order Changed" - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥)
    - "Save Order" - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏)
    - "Quit Order" - –≤—ã—Ö–æ–¥ –∏–∑ –∑–∞–∫–∞–∑–∞/–∑–∞–∫—Ä—ã—Ç–∏–µ
    - "Order recalc" - –ø–µ—Ä–µ—Å—á–µ—Ç –∑–∞–∫–∞–∑–∞

    ChangeLog —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    - oldvalue="0" newvalue="1000" new="1" - –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–ª—é–¥–æ
    - oldvalue="1000" newvalue="0" - —É–¥–∞–ª–µ–Ω–æ –±–ª—é–¥–æ
    - oldvalue="1000" newvalue="2000" - –∏–∑–º–µ–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    """

    def parse(self, xml_data: str) -> Optional[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç—å XML webhook –æ—Ç RKeeper

        Args:
            xml_data: XML —Å—Ç—Ä–æ–∫–∞ –æ—Ç RKeeper

        Returns:
            {
                "event_type": str,  # "New Order", "Order Changed", "Save Order", "Quit Order"
                "visit_id": str,
                "order_ident": str,
                "table_code": str,
                "table_name": str,
                "waiter_code": Optional[str],
                "waiter_name": Optional[str],
                "order_sum": float,  # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
                "paid": bool,  # –û–ø–ª–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
                "finished": bool,  # –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
                "total_pieces": int,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (0 = –≤—Å–µ –±–ª—é–¥–∞ —É–¥–∞–ª–µ–Ω—ã)
                "changes": [  # –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ ChangeLog
                    {
                        "rk_code": str,
                        "rk_id": str,
                        "name": str,
                        "uni": int,
                        "old_quantity": int,  # –°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
                        "new_quantity": int,  # –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
                        "delta": int,  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ (+1, -1, +2 –∏ —Ç.–¥.)
                        "price": float,
                        "is_new": bool,  # True –µ—Å–ª–∏ –±–ª—é–¥–æ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                        "is_deleted": bool,  # True –µ—Å–ª–∏ –±–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ
                    }
                ]
            }
            –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü–∞—Ä—Å–∏–º XML
            root = ET.fromstring(xml_data)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = root.get('name', '')
            if not event_type:
                logger.error("–ê—Ç—Ä–∏–±—É—Ç 'name' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ")
                return None

            logger.info(f"üì® RKeeper event: {event_type}")

            # –ü–æ–ª—É—á–∞–µ–º Order
            order_elem = root.find('Order')
            if order_elem is None:
                logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç <Order> –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_type}'")
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å Order (–Ω–∞–ø—Ä–∏–º–µ—Ä —á–∏—Å—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–µ)
                return None

            visit_id = order_elem.get('visit', '')
            order_ident = order_elem.get('orderIdent', '')
            order_sum_kopeks = int(order_elem.get('orderSum', 0))
            order_sum = order_sum_kopeks / 100.0
            paid = order_elem.get('paid', '0') == '1'
            finished = order_elem.get('finished', '0') == '1'
            total_pieces = int(order_elem.get('totalPieces', 0))

            if not visit_id or not order_ident:
                logger.error("visit_id –∏–ª–∏ order_ident –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return None

            # –ü–æ–ª—É—á–∞–µ–º Table
            table_elem = order_elem.find('Table')
            table_code = table_elem.get('code', '') if table_elem is not None else ''
            table_name = table_elem.get('name', table_code) if table_elem is not None else ''

            # –ü–æ–ª—É—á–∞–µ–º Waiter (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            waiter_elem = order_elem.find('Waiter')
            waiter_code = waiter_elem.get('code') if waiter_elem is not None else None
            waiter_name = waiter_elem.get('name') if waiter_elem is not None else None

            # –î–ª—è "Save Order" –∏ "Quit Order" –ø–∞—Ä—Å–∏–º –í–°–ï –±–ª—é–¥–∞ –∏–∑ Session,
            # –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ ChangeLog (ChangeLog —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ delta)
            if event_type in ['Save Order', 'Quit Order']:
                changes = self._parse_all_sessions(order_elem)
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º ChangeLog
                changes = self._parse_changelog(root, order_elem)

            result = {
                "event_type": event_type,
                "visit_id": visit_id,
                "order_ident": order_ident,
                "table_code": table_code,
                "table_name": table_name,
                "waiter_code": waiter_code,
                "waiter_name": waiter_name,
                "order_sum": order_sum,
                "paid": paid,
                "finished": finished,
                "total_pieces": total_pieces,
                "changes": changes,
            }

            logger.info(
                f"‚úÖ Parsed: event={event_type}, visit={visit_id}, order={order_ident}, "
                f"table={table_code}, changes={len(changes)}, sum={order_sum:.2f}‚ÇΩ, "
                f"paid={paid}, finished={finished}, totalPieces={total_pieces}"
            )

            return result

        except ET.ParseError as e:
            logger.error(f"‚ùå XML parse error: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Unexpected error parsing RKeeper XML: {e}", exc_info=True)
            return None

    def _parse_changelog(self, root: ET.Element, order_elem: ET.Element) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ ChangeLog

        Args:
            root: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç <a>
            order_elem: –≠–ª–µ–º–µ–Ω—Ç <Order>

        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª—é–¥
        """
        changes = []

        # –ò—â–µ–º ChangeLog
        changelog_elem = root.find('ChangeLog')
        if changelog_elem is None:
            # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return changes

        # –ü–∞—Ä—Å–∏–º –≤—Å–µ Dish —ç–ª–µ–º–µ–Ω—Ç—ã –≤ ChangeLog
        for dish_change in changelog_elem.findall('Dish'):
            rk_id = dish_change.get('id', '')
            rk_code = dish_change.get('code', rk_id)
            name = dish_change.get('name', '')
            uni = int(dish_change.get('uni', 0))

            # –°—Ç–∞—Ä–æ–µ –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–≤ –≥—Ä–∞–º–º–∞—Ö)
            old_value_g = int(dish_change.get('oldvalue', 0))
            new_value_g = int(dish_change.get('newvalue', 0))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (1000–≥ = 1 –ø–æ—Ä—Ü–∏—è)
            old_quantity = old_value_g // 1000
            new_quantity = new_value_g // 1000
            delta = new_quantity - old_quantity

            # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
            price_kopeks = int(dish_change.get('price', 0))
            price = price_kopeks / 100.0

            # –§–ª–∞–≥–∏
            is_new = dish_change.get('new') == '1'
            is_deleted = (new_value_g == 0 and old_value_g > 0)

            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –≤ ChangeLog, –∏—â–µ–º –≤ Order/Session
            if not name:
                name = self._find_dish_name(order_elem, uni)

            change = {
                "rk_code": rk_code,
                "rk_id": rk_id,
                "name": name,
                "uni": uni,
                "old_quantity": old_quantity,
                "new_quantity": new_quantity,
                "delta": delta,
                "price": price,
                "is_new": is_new,
                "is_deleted": is_deleted,
            }

            changes.append(change)

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            action_str = "‚ûï ADD" if is_new else ("‚ûñ DELETE" if is_deleted else "üîÑ CHANGE")
            logger.debug(
                f"{action_str} dish: uni={uni}, code={rk_code}, "
                f"qty: {old_quantity}‚Üí{new_quantity} (Œî{delta:+d}), "
                f"price={price:.2f}‚ÇΩ"
            )

        return changes

    def _find_dish_name(self, order_elem: ET.Element, uni: int) -> str:
        """
        –ù–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –ø–æ uni –≤ Order/Session

        Args:
            order_elem: –≠–ª–µ–º–µ–Ω—Ç <Order>
            uni: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏

        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        # –ò—â–µ–º –≤—Å–µ Session/Dish —Å –¥–∞–Ω–Ω—ã–º uni
        for session in order_elem.findall('.//Session'):
            for dish in session.findall('Dish'):
                dish_uni = int(dish.get('uni', 0))
                if dish_uni == uni:
                    return dish.get('name', '')

        return ''

    def _parse_all_sessions(self, order_elem: ET.Element) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç—å –í–°–ï –±–ª—é–¥–∞ –∏–∑ –≤—Å–µ—Ö Session —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ Order

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è "Save Order" –∏ "Quit Order" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å
        –ü–û–õ–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ delta-–∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ ChangeLog.

        RKeeper —Å–æ–∑–¥–∞—ë—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö Session –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
        1. –î–æ–±–∞–≤–ª—è–µ—Ç –±–ª—é–¥–æ ‚Üí –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ ‚Üí —Å–Ω–æ–≤–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ
        2. –ü–æ–ª—É—á–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ Session —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º code –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ uni

        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—É–º–º–∏—Ä—É–µ—Ç quantities –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.

        Args:
            order_elem: –≠–ª–µ–º–µ–Ω—Ç <Order>

        Returns:
            –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–ª—é–¥ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ChangeLog —Ñ–æ—Ä–º–∞—Ç—É)
        """
        from collections import defaultdict

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –±–ª—é–¥–∞ –ø–æ rk_code
        dishes_dict = defaultdict(lambda: {
            "rk_code": None,
            "rk_id": None,
            "name": None,
            "quantity": 0,  # –°—É–º–º–∞ quantity
            "price": 0,
            "unis": [],  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö uni –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        })

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º Session
        for session_elem in order_elem.findall('.//Session'):
            session_uni = session_elem.get('uni', '?')
            session_state = session_elem.get('state', '?')

            logger.debug(f"  Parsing Session uni={session_uni}, state={session_state}")

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º Dish –≤ Session
            for dish_elem in session_elem.findall('Dish'):
                rk_id = dish_elem.get('id', '')
                rk_code = dish_elem.get('code', rk_id)
                name = dish_elem.get('name', '')
                uni = int(dish_elem.get('uni', 0))
                quantity_g = int(dish_elem.get('quantity', 0))
                quantity = quantity_g // 1000  # 1000–≥ = 1 –ø–æ—Ä—Ü–∏—è
                price_kopeks = int(dish_elem.get('price', 0))
                price = price_kopeks / 100.0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Void (–æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–µ –±–ª—é–¥–æ)
                void_elem = dish_elem.find('Void')
                is_voided = void_elem is not None

                if is_voided:
                    logger.debug(f"    ‚è≠Ô∏è  Skipping voided dish: {name} (uni={uni})")
                    continue

                if quantity == 0:
                    logger.debug(f"    ‚è≠Ô∏è  Skipping dish with quantity=0: {name} (uni={uni})")
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º/—Å—É–º–º–∏—Ä—É–µ–º quantity
                dish_data = dishes_dict[rk_code]
                if dish_data["rk_code"] is None:
                    # –ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
                    dish_data["rk_code"] = rk_code
                    dish_data["rk_id"] = rk_id
                    dish_data["name"] = name
                    dish_data["price"] = price

                dish_data["quantity"] += quantity
                dish_data["unis"].append(uni)

                logger.debug(
                    f"    üì¶ Dish: code={rk_code}, name='{name}', uni={uni}, "
                    f"qty={quantity}, total_qty={dish_data['quantity']}"
                )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç changes (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ChangeLog)
        changes = []
        for rk_code, dish_data in dishes_dict.items():
            if dish_data["rk_code"] is None:
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º change –≤ —Ñ–æ—Ä–º–∞—Ç–µ ChangeLog
            # old_quantity=0 –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ "–ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", –∞ –Ω–µ delta
            # new_quantity = —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            # delta = new_quantity (–≤—Å—ë –Ω–æ–≤–æ–µ)
            change = {
                "rk_code": dish_data["rk_code"],
                "rk_id": dish_data["rk_id"],
                "name": dish_data["name"],
                "uni": dish_data["unis"][0] if dish_data["unis"] else 0,  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π uni
                "old_quantity": 0,  # –ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ delta
                "new_quantity": dish_data["quantity"],
                "delta": dish_data["quantity"],  # –í—Å—ë —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ
                "price": dish_data["price"],
                "is_new": False,  # –ù–µ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ new (–∑–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                "is_deleted": False,
            }

            changes.append(change)

            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            unis_str = ", ".join(str(u) for u in dish_data["unis"])
            logger.info(
                f"  ‚úÖ Parsed dish: code={rk_code}, name='{dish_data['name']}', "
                f"total_qty={dish_data['quantity']} (from unis: {unis_str})"
            )

        return changes


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def parse_rkeeper_xml(xml_data: str) -> Optional[Dict]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ RKeeper XML

    Args:
        xml_data: XML —Å—Ç—Ä–æ–∫–∞

    Returns:
        Parsed data –∏–ª–∏ None
    """
    parser = RKeeperXMLParser()
    return parser.parse(xml_data)
