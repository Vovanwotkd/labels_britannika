"""
RKeeper Order Processor
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç RKeeper webhook
"""

import logging
from typing import Dict, Optional
from datetime import datetime
from sqlalchemy.orm import Session

from app.core.database import dishes_db
from app.models import Order, OrderItem, PrintJob, Template
from app.services.printer.tspl_renderer import TSPLRenderer

logger = logging.getLogger(__name__)


class OrderProcessor:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç RKeeper

    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º parsed –¥–∞–Ω–Ω—ã–µ –æ—Ç XML parser
    2. –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º Order –≤ –ë–î
    3. –°–æ–∑–¥–∞—ë–º OrderItem –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
    4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º PrintJob (—Å—Ç–∞—Ç—É—Å QUEUED)
    5. PrintQueueWorker –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∑–∞–¥–∞–Ω–∏—è –∏ –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç
    """

    def __init__(self, db: Session):
        """
        Args:
            db: Database session
        """
        self.db = db

    def process(self, parsed_data: Dict) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑ –æ—Ç RKeeper

        Args:
            parsed_data: Parsed –¥–∞–Ω–Ω—ã–µ –æ—Ç RKeeperXMLParser

        Returns:
            {
                "success": bool,
                "order_id": Optional[int],
                "message": str,
                "items_processed": int,
                "jobs_created": int,
            }
        """
        try:
            action = parsed_data["action"]
            visit_id = parsed_data["visit_id"]
            order_ident = parsed_data["order_ident"]
            table_code = parsed_data["table_code"]
            items_data = parsed_data["items"]

            logger.info(
                f"üîÑ Processing RKeeper order: action={action}, "
                f"visit={visit_id}, order={order_ident}, table={table_code}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–æ–ª–æ–≤ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if not self._check_table_filter(table_code):
                logger.info(f"‚è≠Ô∏è  Table {table_code} excluded by filter, skipping")
                return {
                    "success": True,
                    "order_id": None,
                    "message": f"Table {table_code} excluded by filter",
                    "items_processed": 0,
                    "jobs_created": 0,
                }

            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            order = self._get_or_create_order(
                visit_id=visit_id,
                order_ident=order_ident,
                table_code=table_code,
                table_name=parsed_data.get("table_name", ""),
                waiter_code=parsed_data.get("waiter_code"),
                waiter_name=parsed_data.get("waiter_name"),
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º items
            items_processed = 0
            jobs_created = 0

            for item_data in items_data:
                result = self._process_item(order, item_data)
                items_processed += 1
                jobs_created += result["jobs_created"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë
            self.db.commit()

            logger.info(
                f"‚úÖ Order processed: order_id={order.id}, "
                f"items={items_processed}, jobs={jobs_created}"
            )

            return {
                "success": True,
                "order_id": order.id,
                "message": "Order processed successfully",
                "items_processed": items_processed,
                "jobs_created": jobs_created,
            }

        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Error processing order: {e}", exc_info=True)
            return {
                "success": False,
                "order_id": None,
                "message": str(e),
                "items_processed": 0,
                "jobs_created": 0,
            }

    def _check_table_filter(self, table_code: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å—Ç–æ–ª –≤ —Ñ–∏–ª—å—Ç—Ä

        Args:
            table_code: –ö–æ–¥ —Å—Ç–æ–ª–∞

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, False –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        """
        from app.models import TableFilter

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        filter_entry = self.db.query(TableFilter).filter(
            TableFilter.table_code == table_code,
            TableFilter.enabled == True
        ).first()

        if filter_entry:
            # –°—Ç–æ–ª –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∏–ª—å—Ç—Ä–µ –∏ –∞–∫—Ç–∏–≤–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–∞–∑–µ
        any_filters = self.db.query(TableFilter).filter(
            TableFilter.enabled == True
        ).count()

        if any_filters > 0:
            # –§–∏–ª—å—Ç—Ä—ã –µ—Å—Ç—å, –Ω–æ –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –≤ –Ω–∏—Ö –Ω–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            logger.info(f"‚è≠Ô∏è  Table {table_code} not in selected tables, skipping")
            return False

        # –§–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª—ã
        return True

    def _get_or_create_order(
        self,
        visit_id: str,
        order_ident: str,
        table_code: str,
        table_name: str,
        waiter_code: Optional[str],
        waiter_name: Optional[str],
    ) -> Order:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π

        Args:
            visit_id: ID –≤–∏–∑–∏—Ç–∞
            order_ident: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            table_code: –ö–æ–¥ —Å—Ç–æ–ª–∞
            table_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞
            waiter_code: –ö–æ–¥ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
            waiter_name: –ò–º—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞

        Returns:
            Order –æ–±—ä–µ–∫—Ç
        """
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
        order = self.db.query(Order).filter(
            Order.visit_id == visit_id,
            Order.order_ident == order_ident,
        ).first()

        if order:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (–Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            order.table_code = table_code
            order.table_name = table_name
            order.waiter_code = waiter_code
            order.waiter_name = waiter_name
            order.updated_at = datetime.now()

            logger.debug(f"üìù Updated existing order #{order.id}")
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            order = Order(
                visit_id=visit_id,
                order_ident=order_ident,
                table_code=table_code,
                table_name=table_name,
                waiter_code=waiter_code,
                waiter_name=waiter_name,
                status="NOT_PRINTED",  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ
            )
            self.db.add(order)
            self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID

            logger.debug(f"‚ûï Created new order #{order.id}")

        return order

    def _process_item(self, order: Order, item_data: Dict) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å item (–±–ª—é–¥–æ) –∑–∞–∫–∞–∑–∞

        Args:
            order: Order –æ–±—ä–µ–∫—Ç
            item_data: –î–∞–Ω–Ω—ã–µ item –æ—Ç parser

        Returns:
            {
                "jobs_created": int
            }
        """
        rk_code = item_data["rk_code"]
        uni = item_data["uni"]
        quantity = item_data["quantity"]

        logger.debug(f"  üì¶ Processing item: rk_code={rk_code}, uni={uni}, qty={quantity}")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ quantity = 0 (—É–¥–∞–ª–µ–Ω–æ –∏–∑ –∑–∞–∫–∞–∑–∞)
        if quantity <= 0:
            logger.debug(f"  ‚è≠Ô∏è  Item {rk_code} has quantity=0, skipping")
            return {"jobs_created": 0}

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ dishes_with_extras.sqlite
        dish = dishes_db.get_dish_by_rk_code(rk_code)
        if not dish:
            logger.warning(f"  ‚ö†Ô∏è  Dish {rk_code} not found in database")
            # –°–æ–∑–¥–∞—ë–º item —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ RKeeper
            dish = {
                "name": item_data["name"],
                "rkeeper_code": rk_code,
                "weight_g": 0,
                "calories": 0,
                "protein": 0,
                "fat": 0,
                "carbs": 0,
                "ingredients": [],
                "has_extra_labels": False,
                "extra_labels": [],
            }

        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π OrderItem –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        order_item = self.db.query(OrderItem).filter(
            OrderItem.order_id == order.id,
            OrderItem.uni == uni,
        ).first()

        if order_item:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
            order_item.quantity = quantity
            order_item.updated_at = datetime.now()

            logger.debug(f"  üìù Updated order_item #{order_item.id}")
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            order_item = OrderItem(
                order_id=order.id,
                rk_code=rk_code,
                name=item_data["name"],
                uni=uni,
                quantity=quantity,
                price=item_data["price"],
                modifier_id=item_data.get("modifier_id"),
                modifier_name=item_data.get("modifier_name"),
            )
            self.db.add(order_item)
            self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID

            logger.debug(f"  ‚ûï Created order_item #{order_item.id}")

        # –°–æ–∑–¥–∞—ë–º PrintJob –¥–ª—è —ç—Ç–æ–≥–æ item
        jobs_created = self._create_print_jobs(order_item, dish)

        return {"jobs_created": jobs_created}

    def _create_print_jobs(self, order_item: OrderItem, dish: Dict) -> int:
        """
        –°–æ–∑–¥–∞—Ç—å PrintJob –¥–ª—è order_item

        Args:
            order_item: OrderItem –æ–±—ä–µ–∫—Ç
            dish: –î–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ dishes_with_extras.sqlite

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö jobs
        """
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = self._get_default_template()
        renderer = TSPLRenderer(template.config)

        jobs_created = 0

        # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Ä—Ü–∏–π)
        for i in range(order_item.quantity):
            tspl = renderer.render({
                "name": dish["name"],
                "rk_code": dish["rkeeper_code"],
                "weight_g": dish["weight_g"],
                "calories": dish["calories"],
                "protein": dish["protein"],
                "fat": dish["fat"],
                "carbs": dish["carbs"],
                "ingredients": dish["ingredients"],
                "label_type": "MAIN",
            })

            job = PrintJob(
                order_item_id=order_item.id,
                tspl_data=tspl,
                status="QUEUED",
                retry_count=0,
                max_retries=3,
            )
            self.db.add(job)
            jobs_created += 1

        # –°–æ–∑–¥–∞—ë–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if dish.get("has_extra_labels") and dish.get("extra_labels"):
            for extra in dish["extra_labels"]:
                for i in range(order_item.quantity):
                    tspl = renderer.render({
                        "name": extra["extra_dish_name"],
                        "rk_code": dish["rkeeper_code"],
                        "weight_g": extra["extra_dish_weight_g"],
                        "calories": extra["extra_dish_calories"],
                        "protein": extra.get("extra_dish_protein", 0),
                        "fat": extra.get("extra_dish_fat", 0),
                        "carbs": extra.get("extra_dish_carbs", 0),
                        "ingredients": [],
                        "label_type": "EXTRA",
                    })

                    job = PrintJob(
                        order_item_id=order_item.id,
                        tspl_data=tspl,
                        status="QUEUED",
                        retry_count=0,
                        max_retries=3,
                    )
                    self.db.add(job)
                    jobs_created += 1

        logger.debug(f"    üñ®Ô∏è  Created {jobs_created} print jobs")

        return jobs_created

    def _get_default_template(self) -> Template:
        """
        –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        Returns:
            Template –æ–±—ä–µ–∫—Ç
        """
        template = self.db.query(Template).filter(
            Template.is_default == True
        ).first()

        if not template:
            raise ValueError("Default template not found")

        return template
