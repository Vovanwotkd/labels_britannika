"""
RKeeper 7 XML API Client
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RKeeper API
"""
import httpx
import xml.etree.ElementTree as ET
import logging
from typing import List, Dict, Optional
from datetime import datetime
from sqlalchemy.orm import Session
from ..models.setting import Setting
from ..core.database import SessionLocal

logger = logging.getLogger(__name__)


class RKeeperClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RKeeper 7 XML API"""

    def __init__(self):
        self.base_url = None
        self.username = None
        self.password = None

    def _get_setting_value(self, db: Session, key: str, default: str = "") -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
        setting = db.query(Setting).filter(Setting.key == key).first()
        return setting.value if setting and setting.value else default

    async def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        db = SessionLocal()
        try:
            self.base_url = self._get_setting_value(db, "rkeeper_url")
            self.username = self._get_setting_value(db, "rkeeper_user")
            self.password = self._get_setting_value(db, "rkeeper_pass")
        finally:
            db.close()

    async def _send_request(self, xml_body: str) -> ET.Element:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç XML –∑–∞–ø—Ä–æ—Å –∫ RKeeper API

        Args:
            xml_body: XML —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            XML —ç–ª–µ–º–µ–Ω—Ç —Å –æ—Ç–≤–µ—Ç–æ–º

        Raises:
            httpx.HTTPError: –ü—Ä–∏ –æ—à–∏–±–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
            ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤ –æ—Ç–≤–µ—Ç–µ RKeeper
        """
        if not self.base_url:
            await self._load_config()

        headers = {
            "Content-Type": "application/xml; charset=utf-8"
        }

        auth = None
        if self.username and self.password:
            auth = (self.username, self.password)

        async with httpx.AsyncClient(timeout=30.0, verify=False) as client:
            response = await client.post(
                self.base_url,
                content=xml_body.encode('utf-8'),
                headers=headers,
                auth=auth
            )
            response.raise_for_status()

            # –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
            root = ET.fromstring(response.content)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            status = root.get("Status")
            if status != "Ok":
                error_text = root.get("ErrorText", "Unknown error")
                raise ValueError(f"RKeeper API error: {error_text}")

            return root

    async def get_tables(self) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ –∏–∑ RKeeper

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–æ–≤:
            [
                {
                    "ident": "1",
                    "code": "1",
                    "name": "–ö–∏–æ—Å–∫",
                    "status": "rsInactive",
                    "hall": "1"
                },
                ...
            ]
        """
        xml_request = '''<?xml version="1.0" encoding="UTF-8"?>
<RK7Query>
    <RK7CMD CMD="GetRefData" RefName="TABLES" PropMask="{Ident,Code,Name,Status,Hall}"/>
</RK7Query>'''

        root = await self._send_request(xml_request)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–æ–ª–æ–≤
        tables = []
        items = root.find(".//Items")

        if items is not None:
            for item in items.findall("Item"):
                status = item.get("Status", "")

                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ª—ã (–Ω–µ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –Ω–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
                if status not in ["rsDeleted", "rsInactive"]:
                    tables.append({
                        "ident": item.get("Ident", ""),
                        "code": item.get("Code", ""),
                        "name": item.get("Name", ""),
                        "status": status,
                        "hall": item.get("Hall", "")
                    })

        return tables

    async def get_order_list(self, only_opened: bool = True) -> List[Dict[str, any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ RKeeper

        Args:
            only_opened: –í–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–æ–≤:
            [
                {
                    "visit_id": str,
                    "order_ident": str,
                    "table_code": str,
                    "table_name": str,
                    "order_sum": float,
                    "total_pieces": int,
                    "paid": bool,
                    "finished": bool,
                    "create_time": datetime,
                    "finish_time": Optional[datetime],
                },
                ...
            ]
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º XML –∑–∞–ø—Ä–æ—Å
        only_opened_attr = '1' if only_opened else '0'
        xml_request = f'''<?xml version="1.0" encoding="UTF-8"?>
<RK7Query>
    <RK7CMD CMD="GetOrderList" onlyOpened="{only_opened_attr}" needIdents="1" needCodes="1" needNames="1"/>
</RK7Query>'''

        root = await self._send_request(xml_request)

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        orders = []
        for visit_elem in root.findall(".//Visit"):
            visit_id = visit_elem.get("VisitID", "")

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º –≤ –≤–∏–∑–∏—Ç–µ
            orders_elem = visit_elem.find("Orders")
            if orders_elem is not None:
                for order_elem in orders_elem.findall("Order"):
                    # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∑–∞–∫–∞–∑–∞
                    order_ident = order_elem.get("OrderID", "")  # –í GetOrderList –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è OrderID
                    order_sum_kopeks = int(order_elem.get("OrderSum", 0))
                    order_sum = order_sum_kopeks / 100.0
                    total_pieces = int(order_elem.get("TotalPieces", 0))
                    paid = order_elem.get("Finished", "0") == "1"  # –í GetOrderList –Ω–µ—Ç paid, –∏—Å–ø–æ–ª—å–∑—É–µ–º Finished
                    finished = order_elem.get("Finished", "0") == "1"

                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                    create_time_str = order_elem.get("CreateTime")
                    finish_time_str = order_elem.get("FinishTime")

                    create_time = None
                    if create_time_str:
                        try:
                            create_time = datetime.fromisoformat(create_time_str.replace("Z", "+00:00"))
                        except:
                            pass

                    finish_time = None
                    if finish_time_str:
                        try:
                            finish_time = datetime.fromisoformat(finish_time_str.replace("Z", "+00:00"))
                        except:
                            pass

                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞
                    table_code = order_elem.get("TableCode", "")
                    table_name = order_elem.get("TableName", table_code)

                    orders.append({
                        "visit_id": visit_id,
                        "order_ident": order_ident,
                        "table_code": table_code,
                        "table_name": table_name,
                        "order_sum": order_sum,
                        "total_pieces": total_pieces,
                        "paid": paid,
                        "finished": finished,
                        "create_time": create_time,
                        "finish_time": finish_time,
                    })

        logger.info(f"üìã Fetched {len(orders)} orders from RKeeper")
        return orders

    async def get_order(self, visit_id: str, order_ident: str) -> Dict[str, any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤–∫–ª—é—á–∞—è –±–ª—é–¥–∞

        Args:
            visit_id: ID –≤–∏–∑–∏—Ç–∞
            order_ident: ID –∑–∞–∫–∞–∑–∞

        Returns:
            Dict —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏ –±–ª—é–¥–∞—Ö
        """
        xml_request = f'''<?xml version="1.0" encoding="UTF-8"?>
<RK7Query>
    <RK7CMD CMD="GetOrder" visit="{visit_id}" orderIdent="{order_ident}"/>
</RK7Query>'''

        root = await self._send_request(xml_request)

        # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π XML –æ—Ç–≤–µ—Ç
        import xml.etree.ElementTree as ET
        xml_response = ET.tostring(root, encoding='unicode')
        logger.info(f"üîç GetOrder XML response for visit={visit_id}, order={order_ident}:\n{xml_response}")

        # –ü–∞—Ä—Å–∏–º Order —ç–ª–µ–º–µ–Ω—Ç
        order_elem = root.find(".//Order")
        if order_elem is None:
            raise ValueError(f"Order not found: visit={visit_id}, order={order_ident}")

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        table_elem = order_elem.find("Table")
        table_code = table_elem.get("code", "") if table_elem is not None else ""
        table_name = table_elem.get("name", table_code) if table_elem is not None else table_code

        order_sum_kopeks = int(order_elem.get("orderSum", 0))
        order_sum = order_sum_kopeks / 100.0

        total_pieces = int(order_elem.get("totalPieces", 0))
        paid = order_elem.get("paid", "0") == "1"
        finished = order_elem.get("finished", "0") == "1"

        # –°–æ–±–∏—Ä–∞–µ–º –±–ª—é–¥–∞ –∏–∑ Session
        dishes = []
        session_elem = order_elem.find(".//Session")
        if session_elem is not None:
            for dish_elem in session_elem.findall("Dish"):
                dish_id = dish_elem.get("id", "")
                dish_code = dish_elem.get("code", "")
                dish_name = dish_elem.get("name", "")
                quantity_g = int(dish_elem.get("quantity", 0))
                quantity = quantity_g // 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–º–º—ã –≤ –ø–æ—Ä—Ü–∏–∏ (1000–≥ = 1 –ø–æ—Ä—Ü–∏—è)

                logger.info(
                    f"üì¶ GetOrder dish parsed: name='{dish_name}', code={dish_code}, "
                    f"quantity_raw={quantity_g}, quantity_portions={quantity}"
                )

                dishes.append({
                    "dish_id": dish_id,
                    "dish_code": dish_code,
                    "dish_name": dish_name,
                    "quantity": quantity,
                    "quantity_g": quantity_g,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–º–º—ã –¥–ª—è renderer
                })

        return {
            "visit_id": visit_id,
            "order_ident": order_ident,
            "table_code": table_code,
            "table_name": table_name,
            "order_sum": order_sum,
            "total_pieces": total_pieces,
            "paid": paid,
            "finished": finished,
            "dishes": dishes,
        }


# Singleton instance
_rkeeper_client = None


def get_rkeeper_client() -> RKeeperClient:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç singleton –∏–Ω—Å—Ç–∞–Ω—Å RKeeper –∫–ª–∏–µ–Ω—Ç–∞"""
    global _rkeeper_client
    if _rkeeper_client is None:
        _rkeeper_client = RKeeperClient()
    return _rkeeper_client
