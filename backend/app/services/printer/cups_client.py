"""
CUPS Printer Client - –ø–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ CUPS –¥—Ä–∞–π–≤–µ—Ä
"""

import subprocess
import logging
import tempfile
import os
from typing import Optional
from pathlib import Path

logger = logging.getLogger(__name__)


class CUPSPrinterClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ CUPS (Common Unix Printing System)

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤–º–µ—Å—Ç–æ raw TSPL –∫–æ–º–∞–Ω–¥.
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å (–¥—Ä–∞–π–≤–µ—Ä –∑–Ω–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    - –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è)
    - –ì–∏–±–∫–æ—Å—Ç—å (–º–æ–∂–Ω–æ –ø–µ—á–∞—Ç–∞—Ç—å PNG, PDF, —Ç–µ–∫—Å—Ç)
    """

    def __init__(self, printer_name: str, cups_server: str = "localhost"):
        """
        Args:
            printer_name: –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –≤ CUPS (–Ω–∞–ø—Ä–∏–º–µ—Ä "XPrinter")
            cups_server: CUPS —Å–µ—Ä–≤–µ—Ä (default "localhost" –¥–ª—è —Ö–æ—Å—Ç–∞)
        """
        self.printer_name = printer_name
        self.cups_server = cups_server

    def print_file(self, file_path: str, copies: int = 1) -> bool:
        """
        –ü–µ—á–∞—Ç—å —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ CUPS

        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (PNG, PDF, —Ç–µ–∫—Å—Ç)
            copies: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(file_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É lp
            cmd = [
                'lp',
                '-h', self.cups_server,  # CUPS —Å–µ—Ä–≤–µ—Ä
                '-d', self.printer_name,  # –ò–º—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
                '-n', str(copies),        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π
                '-o', 'media=Custom.58x60mm',  # –†–∞–∑–º–µ—Ä —ç—Ç–∏–∫–µ—Ç–∫–∏
                file_path
            ]

            logger.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–µ—á–∞—Ç—å: {file_path} ‚Üí {self.printer_name} (x{copies})")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=10
            )

            if result.returncode == 0:
                logger.info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å: {result.stdout.strip()}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {result.stderr}")
                return False

        except subprocess.TimeoutExpired:
            logger.error(f"‚ùå Timeout –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ CUPS")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {e}")
            return False

    def print_image_data(self, image_bytes: bytes, filename: str = "label.png", copies: int = 1) -> bool:
        """
        –ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞–π—Ç–æ–≤

        Args:
            image_bytes: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (PNG)
            filename: –ò–º—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            copies: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='wb', suffix='.png', delete=False) as tmp_file:
                tmp_file.write(image_bytes)
                tmp_path = tmp_file.name

            # –ü–µ—á–∞—Ç–∞–µ–º —Ñ–∞–π–ª
            success = self.print_file(tmp_path, copies)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(tmp_path)
            except:
                pass

            return success

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False

    def get_printer_status(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞

        Returns:
            {
                "online": bool,
                "printer_name": str,
                "status": str,
                "error": Optional[str]
            }
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º lpstat -p <printer_name>
            result = subprocess.run(
                ['lpstat', '-h', self.cups_server, '-p', self.printer_name],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥
                status_text = result.stdout.strip()
                is_online = "idle" in status_text.lower() or "printing" in status_text.lower()

                return {
                    "online": is_online,
                    "printer_name": self.printer_name,
                    "status": status_text,
                    "error": None
                }
            else:
                return {
                    "online": False,
                    "printer_name": self.printer_name,
                    "status": "unavailable",
                    "error": result.stderr.strip()
                }

        except subprocess.TimeoutExpired:
            return {
                "online": False,
                "printer_name": self.printer_name,
                "status": "timeout",
                "error": "Timeout –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞"
            }
        except Exception as e:
            return {
                "online": False,
                "printer_name": self.printer_name,
                "status": "error",
                "error": str(e)
            }

    @staticmethod
    def list_printers(cups_server: str = "localhost") -> list:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CUPS –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤

        Args:
            cups_server: CUPS —Å–µ—Ä–≤–µ—Ä

        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
        """
        try:
            result = subprocess.run(
                ['lpstat', '-h', cups_server, '-p'],
                capture_output=True,
                text=True,
                timeout=5
            )

            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ lpstat -p
                # –§–æ—Ä–º–∞—Ç: "printer XPrinter is idle. enabled since ..."
                printers = []
                for line in result.stdout.split('\n'):
                    if line.startswith('printer '):
                        parts = line.split()
                        if len(parts) >= 2:
                            printers.append(parts[1])

                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ CUPS –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {len(printers)}")
                return printers
            else:
                logger.warning(f"‚ö†Ô∏è  lpstat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.stderr}")
                return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤: {e}")
            return []


# ============================================================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CUPSPrinterClient"""

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    printer = CUPSPrinterClient(
        printer_name="XPrinter",
        cups_server="localhost"  # –∏–ª–∏ "host.docker.internal" –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = printer.get_printer_status()
    print(f"–°—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞: {status}")

    # –ü–µ—á–∞—Ç–∞–µ–º —Ñ–∞–π–ª
    if status["online"]:
        success = printer.print_file("/path/to/label.png", copies=1)
        if success:
            print("‚úÖ –ü–µ—á–∞—Ç—å —É—Å–ø–µ—à–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
    all_printers = CUPSPrinterClient.list_printers()
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã: {all_printers}")


if __name__ == "__main__":
    example_usage()
