"""
TCP:9100 Client - –æ—Ç–ø—Ä–∞–≤–∫–∞ TSPL –∫–æ–º–∞–Ω–¥ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä
"""

import socket
import logging
from typing import Optional

logger = logging.getLogger(__name__)


class PrinterClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TSPL –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä —á–µ—Ä–µ–∑ TCP:9100

    –ü—Ä–∏–Ω—Ç–µ—Ä: PC-365B / XP-D365B
    –ü—Ä–æ—Ç–æ–∫–æ–ª: TCP Raw (–ø–æ—Ä—Ç 9100)
    """

    def __init__(self, host: str, port: int = 9100, timeout: int = 5):
        """
        Args:
            host: IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            port: –ü–æ—Ä—Ç (–æ–±—ã—á–Ω–æ 9100)
            timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
        """
        self.host = host
        self.port = port
        self.timeout = timeout

    def send(self, tspl_data: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TSPL –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä

        Args:
            tspl_data: TSPL –∫–æ–º–∞–Ω–¥—ã (—Å—Ç—Ä–æ–∫–∞)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # DEBUG —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–µ—á–∞—Ç—å
        import os
        if os.getenv("DEBUG_SAVE_PNG", "false").lower() == "true":
            logger.info(f"üñºÔ∏è  DEBUG —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ PNG)")
            return True

        try:
            # –°–æ–∑–¥–∞—ë–º TCP socket
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(self.timeout)

                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É {self.host}:{self.port}...")
                sock.connect((self.host, self.port))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º TSPL –¥–∞–Ω–Ω—ã–µ
                tspl_bytes = tspl_data.encode('utf-8')
                sock.sendall(tspl_bytes)

                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(tspl_bytes)} –±–∞–π—Ç –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä {self.host}:{self.port}")
                return True

        except socket.timeout:
            logger.error(f"‚ùå Timeout –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É {self.host}:{self.port}")
            return False

        except ConnectionRefusedError:
            logger.error(f"‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä {self.host}:{self.port} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (Connection refused)")
            return False

        except OSError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É {self.host}:{self.port}: {e}")
            return False

        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä: {e}")
            return False

    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–±–µ–∑ –ø–µ—á–∞—Ç–∏)

        Returns:
            True –µ—Å–ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(self.timeout)
                sock.connect((self.host, self.port))
                logger.info(f"‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä {self.host}:{self.port} –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True

        except (socket.timeout, ConnectionRefusedError, OSError) as e:
            logger.warning(f"‚ö†Ô∏è  –ü—Ä–∏–Ω—Ç–µ—Ä {self.host}:{self.port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

    def get_status(self) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞

        Returns:
            {
                "online": bool,
                "host": str,
                "port": int,
                "error": Optional[str]
            }
        """
        online = self.test_connection()

        return {
            "online": online,
            "host": self.host,
            "port": self.port,
            "error": None if online else "–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        }


# ============================================================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ============================================================================

def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PrinterClient"""

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    printer = PrinterClient(
        host="192.168.1.10",  # IP –ø—Ä–∏–Ω—Ç–µ—Ä–∞
        port=9100,
        timeout=5
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if printer.test_connection():
        print("‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä –æ–Ω–ª–∞–π–Ω")
    else:
        print("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –æ—Ñ–ª–∞–π–Ω")
        return

    # –¢–µ—Å—Ç–æ–≤–∞—è TSPL –∫–æ–º–∞–Ω–¥–∞ (–ø—Ä–æ—Å—Ç–∞—è —ç—Ç–∏–∫–µ—Ç–∫–∞)
    test_tspl = """SIZE 60 mm, 40 mm
GAP 2 mm, 0 mm
DIRECTION 1
CLS
TEXT 10,10,"3",0,1,1,"–¢–ï–°–¢ –ü–†–ò–ù–¢–ï–†–ê"
TEXT 10,50,"2",0,1,1,"PC-365B"
BARCODE 10,90,"128",50,1,0,2,2,"TEST123"
PRINT 1
"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—á–∞—Ç—å
    success = printer.send(test_tspl)

    if success:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —ç—Ç–∏–∫–µ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—á–∞—Ç—å")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏")


if __name__ == "__main__":
    example_usage()
