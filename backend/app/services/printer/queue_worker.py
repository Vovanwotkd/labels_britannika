"""
Print Queue Worker
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—á–∞—Ç–∏
"""

import asyncio
import logging
from datetime import datetime
from typing import Optional

from sqlalchemy.orm import Session

from app.core.database import SessionLocal
from app.models import PrintJob
from app.services.printer.tcp_client import PrinterClient
from app.services.websocket.manager import broadcast_print_job_update

logger = logging.getLogger(__name__)


class PrintQueueWorker:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—á–∞—Ç–∏

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (FIFO)
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    - Graceful shutdown
    """

    def __init__(self, printer_host: str, printer_port: int = 9100):
        """
        Args:
            printer_host: IP –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
            printer_port: –ü–æ—Ä—Ç –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 9100)
        """
        self.printer_host = printer_host
        self.printer_port = printer_port
        self.printer_client = PrinterClient(printer_host, printer_port)

        self._running = False
        self._task: Optional[asyncio.Task] = None

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å worker"""
        if self._running:
            logger.warning("‚ö†Ô∏è  Print queue worker —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._running = True
        self._task = asyncio.create_task(self._run())
        logger.info("üöÄ Print queue worker –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker (graceful shutdown)"""
        if not self._running:
            return

        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ print queue worker...")
        self._running = False

        if self._task:
            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å 10 —Å–µ–∫—É–Ω–¥)
            try:
                await asyncio.wait_for(self._task, timeout=10.0)
            except asyncio.TimeoutError:
                logger.warning("‚ö†Ô∏è  Worker –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                self._task.cancel()

        logger.info("‚úÖ Print queue worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _run(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª worker

        –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ë–î –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º QUEUED
        –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        """
        logger.info("üîÑ Print queue worker: –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")

        while self._running:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
                await self._process_next_job()

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(0.5)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ print queue worker: {e}", exc_info=True)
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                await asyncio.sleep(1.0)

        logger.info("üèÅ Print queue worker: —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω")

    async def _process_next_job(self):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏

        1. –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º QUEUED
        2. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PRINTING
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä
        4. –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ DONE –∏–ª–∏ FAILED
        5. –ü—Ä–∏ –æ—à–∏–±–∫–µ - retry (–µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)
        """
        db = SessionLocal()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ QUEUED (FIFO)
            job = db.query(PrintJob)\
                .filter(PrintJob.status == "QUEUED")\
                .order_by(PrintJob.created_at)\
                .first()

            if not job:
                # –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
                return

            logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ job #{job.id} (order_item_id={job.order_item_id})")

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PRINTING
            job.status = "PRINTING"
            job.started_at = datetime.now()
            db.commit()

            # WebSocket broadcast - job status changed to PRINTING
            await broadcast_print_job_update(
                job_id=job.id,
                status="PRINTING",
                order_item_id=job.order_item_id
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                success = await asyncio.to_thread(
                    self.printer_client.send,
                    job.tspl_data
                )

                if success:
                    # –£—Å–ø–µ—à–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω–æ
                    job.status = "DONE"
                    job.printed_at = datetime.now()
                    db.commit()

                    logger.info(f"‚úÖ Job #{job.id} –Ω–∞–ø–µ—á–∞—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")

                    # WebSocket broadcast - job completed
                    await broadcast_print_job_update(
                        job_id=job.id,
                        status="DONE",
                        order_item_id=job.order_item_id
                    )

                else:
                    # –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏
                    await self._handle_job_failure(db, job, "Printer returned failure")

            except Exception as e:
                # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
                await self._handle_job_failure(db, job, str(e))

        finally:
            db.close()

    async def _handle_job_failure(self, db: Session, job: PrintJob, error_message: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø–µ—á–∞—Ç–∏

        Args:
            db: –°–µ—Å—Å–∏—è –ë–î
            job: –ó–∞–¥–∞–Ω–∏–µ
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        job.retry_count += 1
        job.error_message = error_message

        if job.retry_count < job.max_retries:
            # –ú–æ–∂–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            job.status = "QUEUED"
            db.commit()

            logger.warning(
                f"‚ö†Ô∏è  Job #{job.id} failed: {error_message}. "
                f"Retry {job.retry_count}/{job.max_retries}"
            )

            # WebSocket broadcast - job retry
            await broadcast_print_job_update(
                job_id=job.id,
                status="QUEUED",
                order_item_id=job.order_item_id
            )

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º (—ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è)
            retry_delay = min(2 ** job.retry_count, 30)  # –º–∞–∫—Å 30 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(retry_delay)

        else:
            # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
            job.status = "FAILED"
            job.finished_at = datetime.now()
            db.commit()

            logger.error(
                f"‚ùå Job #{job.id} FAILED –ø–æ—Å–ª–µ {job.retry_count} –ø–æ–ø—ã—Ç–æ–∫: {error_message}"
            )

            # WebSocket broadcast - job failed permanently
            await broadcast_print_job_update(
                job_id=job.id,
                status="FAILED",
                order_item_id=job.order_item_id
            )

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ worker"""
        return self._running


# ============================================================================
# GLOBAL INSTANCE
# ============================================================================

# Global instance (—Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
_worker_instance: Optional[PrintQueueWorker] = None


def get_worker() -> Optional[PrintQueueWorker]:
    """–ü–æ–ª—É—á–∏—Ç—å global instance worker"""
    return _worker_instance


def set_worker(worker: PrintQueueWorker):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å global instance worker"""
    global _worker_instance
    _worker_instance = worker
