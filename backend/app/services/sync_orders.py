"""
Order Synchronization Service
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å RKeeper (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏ —Ä—É—á–Ω–∞—è)
"""

import logging
from typing import Dict
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

from app.models import Order
from app.services.rkeeper_client import get_rkeeper_client

logger = logging.getLogger(__name__)


class OrderSyncService:
    """
    –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å RKeeper

    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç:
    - –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (onlyOpened=True)
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    - –°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö webhooks)
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
    """

    def __init__(self, db: Session):
        """
        Args:
            db: Database session
        """
        self.db = db
        self.rkeeper_client = get_rkeeper_client()

    async def sync_orders(self) -> Dict:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å RKeeper

        Returns:
            {
                "success": bool,
                "fetched_from_rkeeper": int,
                "orders_created": int,
                "orders_updated": int,
                "orders_marked_done": int,
                "orders_marked_cancelled": int,
                "message": str,
            }
        """
        try:
            logger.info("üîÑ Starting order synchronization with RKeeper...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ RKeeper (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
            rkeeper_orders = await self.rkeeper_client.get_order_list(only_opened=True)

            logger.info(f"üì• Fetched {len(rkeeper_orders)} orders from RKeeper")

            orders_created = 0
            orders_updated = 0
            orders_marked_done = 0
            orders_marked_cancelled = 0

            for rk_order in rkeeper_orders:
                visit_id = str(rk_order["visit_id"])
                order_ident = str(rk_order["order_ident"])
                table_code = str(rk_order["table_code"])
                order_sum = rk_order["order_sum"]
                total_pieces = rk_order["total_pieces"]
                paid = rk_order["paid"]
                finished = rk_order["finished"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–π –ë–î
                existing_order = self.db.query(Order).filter(
                    Order.visit_id == visit_id,
                    Order.order_ident == order_ident,
                ).first()

                if existing_order:
                    # –ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                    updated = self._update_order_status(
                        existing_order,
                        total_pieces,
                        paid,
                        finished,
                        order_sum
                    )

                    if updated:
                        orders_updated += 1

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        if existing_order.status == "DONE":
                            orders_marked_done += 1
                        elif existing_order.status == "CANCELLED":
                            orders_marked_cancelled += 1

                else:
                    # –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π webhook?)
                    logger.warning(
                        f"‚ö†Ô∏è  Order {visit_id}/{order_ident} not found in DB - creating from RKeeper data"
                    )

                    new_order = self._create_order_from_rkeeper(
                        visit_id,
                        order_ident,
                        table_code,
                        order_sum,
                        total_pieces,
                        paid,
                        finished,
                    )

                    if new_order:
                        orders_created += 1

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        if new_order.status == "DONE":
                            orders_marked_done += 1
                        elif new_order.status == "CANCELLED":
                            orders_marked_cancelled += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.db.commit()

            logger.info(
                f"‚úÖ Sync completed: fetched={len(rkeeper_orders)}, "
                f"created={orders_created}, updated={orders_updated}, "
                f"done={orders_marked_done}, cancelled={orders_marked_cancelled}"
            )

            return {
                "success": True,
                "fetched_from_rkeeper": len(rkeeper_orders),
                "orders_created": orders_created,
                "orders_updated": orders_updated,
                "orders_marked_done": orders_marked_done,
                "orders_marked_cancelled": orders_marked_cancelled,
                "message": f"Synchronized {len(rkeeper_orders)} orders from RKeeper",
            }

        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Error synchronizing orders: {e}", exc_info=True)
            return {
                "success": False,
                "fetched_from_rkeeper": 0,
                "orders_created": 0,
                "orders_updated": 0,
                "orders_marked_done": 0,
                "orders_marked_cancelled": 0,
                "message": f"Sync failed: {str(e)}",
            }

    def _update_order_status(
        self,
        order: Order,
        total_pieces: int,
        paid: bool,
        finished: bool,
        order_sum: float,
    ) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞

        Args:
            order: Order –æ–±—ä–µ–∫—Ç
            total_pieces: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –∏–∑ RKeeper
            paid: –û–ø–ª–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
            finished: –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
            order_sum: –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞

        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        old_status = order.status
        updated = False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        if order.order_total != order_sum:
            order.order_total = order_sum
            updated = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ (–≤—Å–µ –±–ª—é–¥–∞ —É–¥–∞–ª–µ–Ω—ã)
        if total_pieces == 0 and order.status not in ["CANCELLED", "DONE"]:
            order.status = "CANCELLED"
            order.closed_at = datetime.now()
            logger.info(f"üö´ Order {order.id} marked as CANCELLED (totalPieces=0)")
            updated = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–æ–ø–ª–∞—á–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç)
        elif paid and finished and order.status not in ["DONE", "CANCELLED"]:
            order.status = "DONE"
            order.closed_at = datetime.now()
            logger.info(f"‚úÖ Order {order.id} marked as DONE (paid and finished)")
            updated = True

        if updated:
            order.updated_at = datetime.now()
            logger.debug(
                f"üìù Order {order.id} updated: {old_status} ‚Üí {order.status}, "
                f"sum={order_sum:.2f}‚ÇΩ, totalPieces={total_pieces}"
            )

        return updated

    def _create_order_from_rkeeper(
        self,
        visit_id: str,
        order_ident: str,
        table_code: str,
        order_sum: float,
        total_pieces: int,
        paid: bool,
        finished: bool,
    ) -> Order:
        """
        –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –¥–∞–Ω–Ω—ã—Ö RKeeper (–¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö webhooks)

        Args:
            visit_id: ID –≤–∏–∑–∏—Ç–∞
            order_ident: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            table_code: –ö–æ–¥ —Å—Ç–æ–ª–∞
            order_sum: –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
            total_pieces: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
            paid: –û–ø–ª–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
            finished: –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑

        Returns:
            Order –æ–±—ä–µ–∫—Ç
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if total_pieces == 0:
            status = "CANCELLED"
            closed_at = datetime.now()
        elif paid and finished:
            status = "DONE"
            closed_at = datetime.now()
        else:
            status = "NOT_PRINTED"
            closed_at = None

        order = Order(
            visit_id=visit_id,
            order_ident=order_ident,
            table_code=table_code,
            order_total=order_sum,
            status=status,
            closed_at=closed_at,
        )

        self.db.add(order)
        self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID

        logger.info(
            f"‚ûï Created order #{order.id} from RKeeper: "
            f"visit={visit_id}, order={order_ident}, table={table_code}, "
            f"status={status}, sum={order_sum:.2f}‚ÇΩ"
        )

        return order


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

async def sync_orders_with_rkeeper(db: Session) -> Dict:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤

    Args:
        db: Database session

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    service = OrderSyncService(db)
    return await service.sync_orders()
