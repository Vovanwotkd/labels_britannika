"""
Order Synchronization Service
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å RKeeper (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏ —Ä—É—á–Ω–∞—è)
"""

import logging
from typing import Dict
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

from app.models import Order
from app.services.rkeeper_client import get_rkeeper_client
from app.services.websocket.manager import broadcast_order_update

logger = logging.getLogger(__name__)


class OrderSyncService:
    """
    –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å RKeeper

    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç:
    - –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (onlyOpened=True)
    - –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    - –°–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö webhooks)
    - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
    """

    def __init__(self, db: Session):
        """
        Args:
            db: Database session
        """
        self.db = db
        self.rkeeper_client = get_rkeeper_client()

    async def sync_orders(self) -> Dict:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å RKeeper

        Returns:
            {
                "success": bool,
                "fetched_from_rkeeper": int,
                "orders_created": int,
                "orders_updated": int,
                "orders_marked_done": int,
                "orders_marked_cancelled": int,
                "message": str,
            }
        """
        try:
            logger.info("üîÑ Starting order synchronization with RKeeper...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ RKeeper (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
            rkeeper_orders = await self.rkeeper_client.get_order_list(only_opened=True)

            logger.info(f"üì• Fetched {len(rkeeper_orders)} orders from RKeeper")

            orders_created = 0
            orders_updated = 0
            orders_marked_done = 0
            orders_marked_cancelled = 0

            for rk_order in rkeeper_orders:
                visit_id = str(rk_order["visit_id"])
                order_ident = str(rk_order["order_ident"])
                table_code = str(rk_order["table_code"])
                order_sum = rk_order["order_sum"]
                total_pieces = rk_order["total_pieces"]
                paid = rk_order["paid"]
                finished = rk_order["finished"]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–π –ë–î
                existing_order = self.db.query(Order).filter(
                    Order.visit_id == visit_id,
                    Order.order_ident == order_ident,
                ).first()

                if existing_order:
                    # –ó–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
                    updated = self._update_order_status(
                        existing_order,
                        total_pieces,
                        paid,
                        finished,
                        order_sum
                    )

                    if updated:
                        orders_updated += 1

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        if existing_order.status == "DONE":
                            orders_marked_done += 1
                        elif existing_order.status == "CANCELLED":
                            orders_marked_cancelled += 1

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                        await self._send_order_update(existing_order)

                else:
                    # –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏ —Å–æ–∑–¥–∞—ë–º
                    logger.warning(
                        f"‚ö†Ô∏è  Order {visit_id}/{order_ident} not found in DB - fetching details from RKeeper"
                    )

                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤–∫–ª—é—á–∞—è –±–ª—é–¥–∞
                        order_details = await self.rkeeper_client.get_order(visit_id, order_ident)

                        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å –±–ª—é–¥–∞–º–∏
                        new_order = await self._create_order_from_rkeeper(order_details)

                        if new_order:
                            orders_created += 1

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                            if new_order.status == "DONE":
                                orders_marked_done += 1
                            elif new_order.status == "CANCELLED":
                                orders_marked_cancelled += 1

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
                            await self._send_order_update(new_order)

                    except Exception as e:
                        logger.error(f"‚ùå Failed to create order from RKeeper: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.db.commit()

            logger.info(
                f"‚úÖ Sync completed: fetched={len(rkeeper_orders)}, "
                f"created={orders_created}, updated={orders_updated}, "
                f"done={orders_marked_done}, cancelled={orders_marked_cancelled}"
            )

            return {
                "success": True,
                "fetched_from_rkeeper": len(rkeeper_orders),
                "orders_created": orders_created,
                "orders_updated": orders_updated,
                "orders_marked_done": orders_marked_done,
                "orders_marked_cancelled": orders_marked_cancelled,
                "message": f"Synchronized {len(rkeeper_orders)} orders from RKeeper",
            }

        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå Error synchronizing orders: {e}", exc_info=True)
            return {
                "success": False,
                "fetched_from_rkeeper": 0,
                "orders_created": 0,
                "orders_updated": 0,
                "orders_marked_done": 0,
                "orders_marked_cancelled": 0,
                "message": f"Sync failed: {str(e)}",
            }

    def _update_order_status(
        self,
        order: Order,
        total_pieces: int,
        paid: bool,
        finished: bool,
        order_sum: float,
    ) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞

        Args:
            order: Order –æ–±—ä–µ–∫—Ç
            total_pieces: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –∏–∑ RKeeper
            paid: –û–ø–ª–∞—á–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
            finished: –ó–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∑–∞–∫–∞–∑
            order_sum: –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞

        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        old_status = order.status
        updated = False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        if order.order_total != order_sum:
            order.order_total = order_sum
            updated = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ (–≤—Å–µ –±–ª—é–¥–∞ —É–¥–∞–ª–µ–Ω—ã)
        if total_pieces == 0 and order.status not in ["CANCELLED", "DONE"]:
            order.status = "CANCELLED"
            order.closed_at = datetime.now()
            logger.info(f"üö´ Order {order.id} marked as CANCELLED (totalPieces=0)")
            updated = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–æ–ø–ª–∞—á–µ–Ω –∏ –∑–∞–∫—Ä—ã—Ç)
        elif paid and finished and order.status not in ["DONE", "CANCELLED"]:
            order.status = "DONE"
            order.closed_at = datetime.now()
            logger.info(f"‚úÖ Order {order.id} marked as DONE (paid and finished)")
            updated = True

        if updated:
            order.updated_at = datetime.now()
            logger.debug(
                f"üìù Order {order.id} updated: {old_status} ‚Üí {order.status}, "
                f"sum={order_sum:.2f}‚ÇΩ, totalPieces={total_pieces}"
            )

        return updated

    async def _create_order_from_rkeeper(self, order_details: Dict) -> Order:
        """
        –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å –±–ª—é–¥–∞–º–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö RKeeper

        Args:
            order_details: Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ (–∏–∑ get_order())

        Returns:
            Order –æ–±—ä–µ–∫—Ç
        """
        from app.models import OrderItem, PrintJob
        from app.services.printer.image_label_renderer import ImageLabelRenderer

        visit_id = order_details["visit_id"]
        order_ident = order_details["order_ident"]
        table_code = order_details["table_code"]
        order_sum = order_details["order_sum"]
        total_pieces = order_details["total_pieces"]
        paid = order_details["paid"]
        finished = order_details["finished"]
        dishes = order_details["dishes"]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if total_pieces == 0:
            status = "CANCELLED"
            closed_at = datetime.now()
        elif paid and finished:
            status = "DONE"
            closed_at = datetime.now()
        else:
            status = "NOT_PRINTED"
            closed_at = None

        # –°–æ–∑–¥–∞—ë–º Order
        order = Order(
            visit_id=visit_id,
            order_ident=order_ident,
            table_code=table_code,
            order_total=order_sum,
            status=status,
            closed_at=closed_at,
        )

        self.db.add(order)
        self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID

        logger.info(
            f"‚ûï Created order #{order.id} from RKeeper: "
            f"visit={visit_id}, order={order_ident}, table={table_code}, "
            f"status={status}, sum={order_sum:.2f}‚ÇΩ, dishes={len(dishes)}"
        )

        # –°–æ–∑–¥–∞—ë–º OrderItem –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
        for dish in dishes:
            logger.info(
                f"  üì¶ Creating OrderItem: name='{dish['dish_name']}', "
                f"quantity={dish['quantity']}, quantity_g={dish.get('quantity_g', 'N/A')}"
            )

            order_item = OrderItem(
                order_id=order.id,
                rk_code=dish["dish_code"],
                dish_name=dish["dish_name"],
                quantity=dish["quantity"],  # –£–∂–µ –≤ –ø–æ—Ä—Ü–∏—è—Ö (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ get_order)
            )
            self.db.add(order_item)
            self.db.flush()

            logger.info(f"  ‚úÖ OrderItem created: id={order_item.id}, quantity={order_item.quantity}")

            # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: PrintJob —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ OrderProcessor —á–µ—Ä–µ–∑ webhook,
            # –∞ –Ω–µ –∑–¥–µ—Å—å. –≠—Ç–æ—Ç –±–ª–æ–∫ —É—Å—Ç–∞—Ä–µ–ª –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º–µ.
            # –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª—ë–Ω.

            # # –°–æ–∑–¥–∞—ë–º PrintJob –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª—é–¥–∞
            # try:
            #     # TODO: –≠—Ç–æ—Ç –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OrderProcessor
            #     pass
            # except Exception as e:
            #     logger.error(f"  ‚ùå Failed to create print job for {dish['dish_name']}: {e}")

        return order

    async def _send_order_update(self, order: Order) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

        Args:
            order: Order –æ–±—ä–µ–∫—Ç
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
            order_dict = {
                "id": order.id,
                "visit_id": order.visit_id,
                "order_ident": order.order_ident,
                "table_code": order.table_code,
                "order_total": float(order.order_total) if order.order_total else 0.0,
                "status": order.status,
                "created_at": order.created_at.isoformat() if order.created_at else None,
                "updated_at": order.updated_at.isoformat() if order.updated_at else None,
                "closed_at": order.closed_at.isoformat() if order.closed_at else None,
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º event_type, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            await broadcast_order_update(
                order_id=order.id,
                event_type="order_updated",  # –§—Ä–æ–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç message.event
                data=order_dict
            )

            logger.debug(f"üì° WebSocket notification sent for order #{order.id}")

        except Exception as e:
            logger.error(f"‚ùå Failed to send WebSocket notification for order #{order.id}: {e}")


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

async def sync_orders_with_rkeeper(db: Session) -> Dict:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤

    Args:
        db: Database session

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    service = OrderSyncService(db)
    return await service.sync_orders()


def sync_single_order(db: Session, order_id: int) -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ GetOrder API

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ webhook –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ quantities
    (–∫–æ–≥–¥–∞ RKeeper —Å–æ–∑–¥–∞—ë—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö Session)

    Args:
        db: Database session
        order_id: ID –∑–∞–∫–∞–∑–∞ –≤ –Ω–∞—à–µ–π –ë–î
    """
    from app.models import Order, OrderItem
    from app.services.rkeeper_client import RKeeperClient

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = db.query(Order).filter(Order.id == order_id).first()
    if not order:
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ RKeeper
    client = RKeeperClient()
    order_data = client.get_order(order.visit_id, order.order_ident)

    if not order_data or not order_data.get('dishes'):
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º quantities –∏–∑ GetOrder (—Å—É–º–º–∏—Ä—É–µ—Ç –≤—Å–µ Session)
    for dish_data in order_data['dishes']:
        # –ò—â–µ–º OrderItem –ø–æ rk_code
        order_item = db.query(OrderItem).filter(
            OrderItem.order_id == order.id,
            OrderItem.rk_code == dish_data['rk_code']
        ).first()

        if order_item and order_item.quantity != dish_data['quantity']:
            logger.debug(
                f"  üîÑ Synced quantity for {dish_data['rk_code']}: "
                f"{order_item.quantity}‚Üí{dish_data['quantity']}"
            )
            order_item.quantity = dish_data['quantity']

    db.commit()
