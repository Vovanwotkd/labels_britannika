"""
Templates API
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫
"""

import logging
from typing import List, Optional
from datetime import datetime
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from pydantic import BaseModel

from app.core.database import get_db
from app.models import Template
from app.api.auth_api import require_auth, require_admin
from app.models import User

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/templates", tags=["templates"])


# ============================================================================
# SCHEMAS
# ============================================================================

class TemplateConfigSchema(BaseModel):
    """–°—Ö–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
    paper_width_mm: int
    paper_height_mm: int
    paper_gap_mm: int
    shelf_life_hours: int
    logo: Optional[dict] = None
    title: Optional[dict] = None
    weight_calories: Optional[dict] = None
    bju: Optional[dict] = None
    ingredients: Optional[dict] = None
    datetime_shelf: Optional[dict] = None
    barcode: Optional[dict] = None

    class Config:
        extra = "allow"  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è


class TemplateSchema(BaseModel):
    """–°—Ö–µ–º–∞ —à–∞–±–ª–æ–Ω–∞"""
    id: int
    name: str
    brand_id: Optional[str]
    is_default: bool
    config: dict
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
        json_encoders = {
            datetime: lambda v: v.isoformat() if v else None
        }


class TemplateCreateRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    name: str
    brand_id: Optional[str] = None
    is_default: bool = False
    config: dict


class TemplateUpdateRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"""
    name: Optional[str] = None
    brand_id: Optional[str] = None
    is_default: Optional[bool] = None
    config: Optional[dict] = None


# ============================================================================
# ENDPOINTS
# ============================================================================

@router.get("/", response_model=List[TemplateSchema])
async def get_all_templates(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_auth)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã

    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    templates = db.query(Template).all()
    return templates


@router.get("/{template_id}", response_model=TemplateSchema)
async def get_template(
    template_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_auth)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ ID

    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    template = db.query(Template).filter(Template.id == template_id).first()

    if not template:
        raise HTTPException(status_code=404, detail="Template not found")

    return template


@router.post("/", response_model=TemplateSchema)
async def create_template(
    request: TemplateCreateRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω

    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å brand_id
    if request.brand_id:
        existing = db.query(Template).filter(
            Template.brand_id == request.brand_id
        ).first()
        if existing:
            raise HTTPException(
                status_code=400,
                detail=f"Template with brand_id '{request.brand_id}' already exists"
            )

    # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ default, —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ —É –¥—Ä—É–≥–∏—Ö
    if request.is_default:
        db.query(Template).update({"is_default": False})

    template = Template(
        name=request.name,
        brand_id=request.brand_id,
        is_default=request.is_default,
        config=request.config,
    )

    db.add(template)
    db.commit()
    db.refresh(template)

    logger.info(f"‚ûï Template created: {template.name} (id={template.id})")

    return template


@router.put("/{template_id}", response_model=TemplateSchema)
async def update_template(
    template_id: int,
    request: TemplateUpdateRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """
    –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω

    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    template = db.query(Template).filter(Template.id == template_id).first()

    if not template:
        raise HTTPException(status_code=404, detail="Template not found")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    if request.name is not None:
        template.name = request.name

    if request.brand_id is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å brand_id
        existing = db.query(Template).filter(
            Template.brand_id == request.brand_id,
            Template.id != template_id
        ).first()
        if existing:
            raise HTTPException(
                status_code=400,
                detail=f"Template with brand_id '{request.brand_id}' already exists"
            )
        template.brand_id = request.brand_id

    if request.is_default is not None:
        if request.is_default:
            # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ default —É –¥—Ä—É–≥–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
            db.query(Template).filter(Template.id != template_id).update(
                {"is_default": False}
            )
        template.is_default = request.is_default

    if request.config is not None:
        template.config = request.config

    db.commit()
    db.refresh(template)

    logger.info(f"üìù Template updated: {template.name} (id={template.id})")

    return template


@router.delete("/{template_id}")
async def delete_template(
    template_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """
    –£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω

    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    template = db.query(Template).filter(Template.id == template_id).first()

    if not template:
        raise HTTPException(status_code=404, detail="Template not found")

    if template.is_default:
        raise HTTPException(
            status_code=400,
            detail="Cannot delete default template"
        )

    db.delete(template)
    db.commit()

    logger.info(f"üóëÔ∏è  Template deleted: {template.name} (id={template.id})")

    return {
        "success": True,
        "message": f"Template '{template.name}' deleted"
    }


@router.post("/{template_id}/set-default")
async def set_default_template(
    template_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    template = db.query(Template).filter(Template.id == template_id).first()

    if not template:
        raise HTTPException(status_code=404, detail="Template not found")

    # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ default —É –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤
    db.query(Template).update({"is_default": False})

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    template.is_default = True
    db.commit()
    db.refresh(template)

    logger.info(f"‚≠ê Default template set: {template.name} (id={template.id})")

    return {
        "success": True,
        "message": f"Template '{template.name}' set as default",
        "template": TemplateSchema.from_orm(template)
    }


@router.post("/{template_id}/test-print")
async def test_print_template(
    template_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –ø–µ—á–∞—Ç—å —à–∞–±–ª–æ–Ω–∞

    –ü–µ—á–∞—Ç–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —ç—Ç–∏–∫–µ—Ç–∫—É —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    from app.models import PrintJob
    from app.services.printer.tspl_renderer import TSPLRenderer

    template = db.query(Template).filter(Template.id == template_id).first()

    if not template:
        raise HTTPException(status_code=404, detail="Template not found")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
    test_dish_data = {
        "name": "–¢–ï–°–¢–û–í–û–ï –ë–õ–Æ–î–û",
        "rk_code": "TEST123",
        "weight_g": 250,
        "calories": 350,
        "protein": 15.5,
        "fat": 12.3,
        "carbs": 45.2,
        "ingredients": ["–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1", "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2", "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 3"],
        "label_type": "MAIN"
    }

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TSPL –∫–æ–º–∞–Ω–¥—ã
        renderer = TSPLRenderer(template.config)
        tspl_code = renderer.render(test_dish_data)

        # –°–æ–∑–¥–∞—ë–º print job
        print_job = PrintJob(
            order_id=None,  # –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞–∫–∞–∑—É
            order_item_id=None,
            dish_name="TEST: " + template.name,
            dish_code="TEST",
            quantity=1,
            label_type="MAIN",
            tspl_code=tspl_code,
            status="QUEUED",
        )

        db.add(print_job)
        db.commit()
        db.refresh(print_job)

        logger.info(f"üñ®Ô∏è  Test print job created for template: {template.name} (id={template.id})")

        return {
            "success": True,
            "message": f"Test print queued for template '{template.name}'",
            "print_job_id": print_job.id
        }

    except Exception as e:
        logger.error(f"‚ùå Failed to create test print job: {e}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail=f"Failed to create test print: {str(e)}"
        )
