"""
Webhook API - RKeeper Integration
Endpoint –¥–ª—è –ø—Ä–∏—ë–º–∞ webhook –æ—Ç RKeeper
"""

import logging
from fastapi import APIRouter, Request, Depends, HTTPException
from sqlalchemy.orm import Session

from app.core.database import get_db
from app.services.rkeeper.xml_parser import parse_rkeeper_xml
from app.services.rkeeper.order_processor import OrderProcessor

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/webhook", tags=["webhook"])


# ============================================================================
# ENDPOINTS
# ============================================================================

@router.post("/rkeeper")
async def rkeeper_webhook(
    request: Request,
    db: Session = Depends(get_db)
):
    """
    RKeeper webhook endpoint

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç XML –æ—Ç RKeeper –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

    –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:
    - Content-Type: text/xml
    - Body: XML —Å –∑–∞–∫–∞–∑–æ–º

    –õ–æ–≥–∏–∫–∞:
    1. –ü–∞—Ä—Å–∏–º XML
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–æ–ª–æ–≤
    3. –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º Order
    4. –°–æ–∑–¥–∞—ë–º OrderItem
    5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º PrintJob (QUEUED)
    6. PrintQueueWorker –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∏ –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - HTTP 200 OK (–≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–Ω—É—Ç—Ä–∏)
    - RKeeper –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–µ—Ç—Ä–∞–∏—Ç—å
    """
    try:
        # –ß–∏—Ç–∞–µ–º body –∫–∞–∫ text
        body = await request.body()
        xml_data = body.decode('utf-8')

        logger.info(f"üì® Received RKeeper webhook ({len(xml_data)} bytes)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from app.models.setting import Setting
        logging_setting = db.query(Setting).filter(Setting.key == "rkeeper_logging").first()
        rkeeper_logging_enabled = (
            logging_setting and
            logging_setting.value and
            logging_setting.value.lower() in ("true", "1", "yes", "y")
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if rkeeper_logging_enabled:
            import os
            from datetime import datetime
            log_dir = "/app/data/rkeeper_logs"
            os.makedirs(log_dir, exist_ok=True)
            log_file = f"{log_dir}/webhook_{datetime.now().strftime('%Y%m%d')}.log"
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(f"\n{'='*80}\n")
                f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] RKeeper Webhook\n")
                f.write(f"{'='*80}\n")
                f.write(xml_data)
                f.write(f"\n{'='*80}\n\n")
            logger.info(f"üìÑ Logged to {log_file}")
        else:
            logger.debug(f"üìÑ Raw XML:\n{xml_data}")

        # –ü–∞—Ä—Å–∏–º XML
        parsed_data = parse_rkeeper_xml(xml_data)

        if not parsed_data:
            logger.error("‚ùå Failed to parse RKeeper XML")
            # –í—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã RKeeper –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
            return {"status": "error", "message": "Failed to parse XML"}

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ "Order Changed" (–∫–æ–≥–¥–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–∞–±–∏—Ä–∞–µ—Ç –∑–∞–∫–∞–∑)
        event_type = parsed_data.get('event_type', '')
        if event_type not in ['Save Order', 'Quit Order']:
            logger.info(f"‚è≠Ô∏è  Skipping event '{event_type}' (waiting for Save/Quit)")
            return {
                "status": "ok",
                "message": f"Event '{event_type}' skipped (not Save/Quit)",
                "order_id": None,
                "items_processed": 0,
                "jobs_created": 0,
            }

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
        processor = OrderProcessor(db)
        result = processor.process(parsed_data)

        if result["success"] and result.get('order_id'):
            logger.info(
                f"‚úÖ Webhook processed: order_id={result['order_id']}, "
                f"items={result['items_processed']}, jobs={result['jobs_created']}"
            )

            # GetOrder sync –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - parser —Ç–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏—Ç –í–°–ï Session
            # –∏–∑ webhook XML –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—É–º–º–∏—Ä—É–µ—Ç quantities

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            from app.services.websocket.manager import broadcast_order_update

            # –ú–∞–ø–ø–∏–Ω–≥ RKeeper —Å–æ–±—ã—Ç–∏–π –≤ frontend —Å–æ–±—ã—Ç–∏—è
            rkeeper_event = parsed_data.get('event_type', 'Order Changed')
            event_mapping = {
                'New Order': 'new_order',
                'Order Changed': 'order_updated',
                'Save Order': 'order_updated',
                'Quit Order': 'order_updated',
                'Open Order': 'order_updated',
            }
            frontend_event = event_mapping.get(rkeeper_event, 'order_updated')

            try:
                await broadcast_order_update(
                    order_id=result['order_id'],
                    event_type=frontend_event,
                    data={
                        "items_count": result.get('items_processed', 0),
                        "jobs_count": result.get('jobs_created', 0),
                    }
                )
                logger.debug(f"üì¢ Sent WebSocket notification for order {result['order_id']} (event={frontend_event})")
            except Exception as ws_err:
                logger.error(f"‚ùå Failed to send WebSocket notification: {ws_err}")
                # –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

        else:
            logger.error(f"‚ùå Webhook processing failed: {result['message']}")

        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        return {
            "status": "ok" if result["success"] else "error",
            "message": result["message"],
            "order_id": result.get("order_id"),
            "items_processed": result.get("items_processed", 0),
            "jobs_created": result.get("jobs_created", 0),
        }

    except Exception as e:
        logger.error(f"‚ùå Unexpected error in webhook: {e}", exc_info=True)

        # –í—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã RKeeper –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
        return {
            "status": "error",
            "message": str(e)
        }


@router.post("/test")
async def test_webhook(db: Session = Depends(get_db)):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π webhook endpoint

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π XML –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    # –¢–µ—Å—Ç–æ–≤—ã–π XML
    test_xml = """<?xml version="1.0" encoding="UTF-8"?>
<RK7Query>
    <a name="Save Order">
        <Order visit="123456" orderIdent="7890">
            <Table code="101" name="–°—Ç–æ–ª 1"/>
            <Waiter code="5" name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"/>
            <Session>
                <Dish id="2538" code="2538" name="–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π" uni="1" quantity="1000" price="45000"/>
                <Dish id="2539" code="2539" name="–ö–æ—Ç–ª–µ—Ç–∞ –ø–æ-–∫–∏–µ–≤—Å–∫–∏" uni="2" quantity="2000" price="35000">
                    <Modi id="123" name="–° –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–º –ø—é—Ä–µ"/>
                </Dish>
            </Session>
            <ChangeLog>
                <Dish id="2538" uni="1" oldvalue="0" newvalue="1000" price="45000"/>
                <Dish id="2539" uni="2" oldvalue="0" newvalue="2000" price="35000"/>
                <Modi id="123"/>
            </ChangeLog>
        </Order>
    </a>
</RK7Query>"""

    logger.info("üß™ Processing test webhook")

    # –ü–∞—Ä—Å–∏–º
    parsed_data = parse_rkeeper_xml(test_xml)

    if not parsed_data:
        raise HTTPException(status_code=400, detail="Failed to parse test XML")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    processor = OrderProcessor(db)
    result = processor.process(parsed_data)

    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])

    return {
        "status": "ok",
        "message": "Test webhook processed successfully",
        "parsed_data": parsed_data,
        "result": result,
    }
