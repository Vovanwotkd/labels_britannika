"""
Webhook API - RKeeper Integration
Endpoint –¥–ª—è –ø—Ä–∏—ë–º–∞ webhook –æ—Ç RKeeper
"""

import logging
from fastapi import APIRouter, Request, Depends, HTTPException
from sqlalchemy.orm import Session

from app.core.database import get_db
from app.services.rkeeper.xml_parser import parse_rkeeper_xml
from app.services.rkeeper.order_processor import OrderProcessor

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/webhook", tags=["webhook"])


# ============================================================================
# ENDPOINTS
# ============================================================================

@router.post("/rkeeper")
async def rkeeper_webhook(
    request: Request,
    db: Session = Depends(get_db)
):
    """
    RKeeper webhook endpoint

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç XML –æ—Ç RKeeper –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

    –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:
    - Content-Type: text/xml
    - Body: XML —Å –∑–∞–∫–∞–∑–æ–º

    –õ–æ–≥–∏–∫–∞:
    1. –ü–∞—Ä—Å–∏–º XML
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Å—Ç–æ–ª–æ–≤
    3. –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º Order
    4. –°–æ–∑–¥–∞—ë–º OrderItem
    5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º PrintJob (QUEUED)
    6. PrintQueueWorker –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –∏ –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - HTTP 200 OK (–≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–Ω—É—Ç—Ä–∏)
    - RKeeper –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–µ—Ç—Ä–∞–∏—Ç—å
    """
    try:
        # –ß–∏—Ç–∞–µ–º body –∫–∞–∫ text
        body = await request.body()
        xml_data = body.decode('utf-8')

        logger.info(f"üì® Received RKeeper webhook ({len(xml_data)} bytes)")
        logger.debug(f"XML data:\n{xml_data}")

        # –ü–∞—Ä—Å–∏–º XML
        parsed_data = parse_rkeeper_xml(xml_data)

        if not parsed_data:
            logger.error("‚ùå Failed to parse RKeeper XML")
            # –í—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã RKeeper –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
            return {"status": "error", "message": "Failed to parse XML"}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
        processor = OrderProcessor(db)
        result = processor.process(parsed_data)

        if result["success"]:
            logger.info(
                f"‚úÖ Webhook processed: order_id={result['order_id']}, "
                f"items={result['items_processed']}, jobs={result['jobs_created']}"
            )
        else:
            logger.error(f"‚ùå Webhook processing failed: {result['message']}")

        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        return {
            "status": "ok" if result["success"] else "error",
            "message": result["message"],
            "order_id": result.get("order_id"),
            "items_processed": result.get("items_processed", 0),
            "jobs_created": result.get("jobs_created", 0),
        }

    except Exception as e:
        logger.error(f"‚ùå Unexpected error in webhook: {e}", exc_info=True)

        # –í—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã RKeeper –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª
        return {
            "status": "error",
            "message": str(e)
        }


@router.post("/test")
async def test_webhook(db: Session = Depends(get_db)):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π webhook endpoint

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π XML –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    # –¢–µ—Å—Ç–æ–≤—ã–π XML
    test_xml = """<?xml version="1.0" encoding="UTF-8"?>
<RK7Query>
    <a name="Save Order">
        <Order visit="123456" orderIdent="7890">
            <Table code="101" name="–°—Ç–æ–ª 1"/>
            <Waiter code="5" name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"/>
            <Session>
                <Dish id="2538" code="2538" name="–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π" uni="1" quantity="1000" price="45000"/>
                <Dish id="2539" code="2539" name="–ö–æ—Ç–ª–µ—Ç–∞ –ø–æ-–∫–∏–µ–≤—Å–∫–∏" uni="2" quantity="2000" price="35000">
                    <Modi id="123" name="–° –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–º –ø—é—Ä–µ"/>
                </Dish>
            </Session>
            <ChangeLog>
                <Dish id="2538" uni="1" oldvalue="0" newvalue="1000" price="45000"/>
                <Dish id="2539" uni="2" oldvalue="0" newvalue="2000" price="35000"/>
                <Modi id="123"/>
            </ChangeLog>
        </Order>
    </a>
</RK7Query>"""

    logger.info("üß™ Processing test webhook")

    # –ü–∞—Ä—Å–∏–º
    parsed_data = parse_rkeeper_xml(test_xml)

    if not parsed_data:
        raise HTTPException(status_code=400, detail="Failed to parse test XML")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    processor = OrderProcessor(db)
    result = processor.process(parsed_data)

    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])

    return {
        "status": "ok",
        "message": "Test webhook processed successfully",
        "parsed_data": parsed_data,
        "result": result,
    }
