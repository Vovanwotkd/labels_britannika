"""
Authentication API
–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–æ–≥–∏–Ω, –ª–æ–≥–∞—É—Ç)
"""

import logging
from datetime import datetime, timedelta
from typing import Optional

from fastapi import APIRouter, Depends, HTTPException, Response, Cookie
from sqlalchemy.orm import Session
from pydantic import BaseModel

from app.core.database import get_db
from app.core.security import verify_password, generate_session_id
from app.models import User, Session as UserSession

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/auth", tags=["auth"])

# –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ (7 –¥–Ω–µ–π)
SESSION_LIFETIME_DAYS = 7


# ============================================================================
# SCHEMAS
# ============================================================================

class LoginRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥"""
    login: str
    password: str


class LoginResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥"""
    success: bool
    message: str
    user: Optional[dict] = None


class CurrentUserResponse(BaseModel):
    """–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    id: int
    login: str
    role: str
    full_name: Optional[str]


# ============================================================================
# DEPENDENCIES
# ============================================================================

def get_current_user(
    session_id: Optional[str] = Cookie(None, alias="session_id"),
    db: Session = Depends(get_db)
) -> Optional[User]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ session_id –∏–∑ cookie

    Args:
        session_id: Session ID –∏–∑ cookie
        db: Database session

    Returns:
        User –æ–±—ä–µ–∫—Ç –∏–ª–∏ None
    """
    if not session_id:
        return None

    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    session = db.query(UserSession).filter(
        UserSession.session_id == session_id,
        UserSession.expires_at > datetime.now()
    ).first()

    if not session:
        return None

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.id == session.user_id).first()

    return user


def require_auth(
    current_user: User = Depends(get_current_user)
) -> User:
    """
    Dependency –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    """
    if not current_user:
        raise HTTPException(
            status_code=401,
            detail="Not authenticated"
        )

    return current_user


def require_admin(
    current_user: User = Depends(require_auth)
) -> User:
    """
    Dependency –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    if current_user.role != "admin":
        raise HTTPException(
            status_code=403,
            detail="Admin access required"
        )

    return current_user


# ============================================================================
# ENDPOINTS
# ============================================================================

@router.post("/login", response_model=LoginResponse)
async def login(
    request: LoginRequest,
    response: Response,
    db: Session = Depends(get_db)
):
    """
    –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É

    Args:
        login: –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å

    Returns:
        LoginResponse —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Set-Cookie: session_id
    """
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.login == request.login).first()

    if not user:
        logger.warning(f"üîí Login failed: user '{request.login}' not found")
        raise HTTPException(
            status_code=401,
            detail="Invalid login or password"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if not verify_password(request.password, user.password_hash):
        logger.warning(f"üîí Login failed: invalid password for user '{request.login}'")
        raise HTTPException(
            status_code=401,
            detail="Invalid login or password"
        )

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
    session_id = generate_session_id()
    expires_at = datetime.now() + timedelta(days=SESSION_LIFETIME_DAYS)

    session = UserSession(
        user_id=user.id,
        session_id=session_id,
        expires_at=expires_at,
    )
    db.add(session)
    db.commit()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
    response.set_cookie(
        key="session_id",
        value=session_id,
        max_age=SESSION_LIFETIME_DAYS * 24 * 60 * 60,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        httponly=True,
        samesite="lax",
    )

    logger.info(f"‚úÖ Login successful: user '{user.login}' (role={user.role})")

    return LoginResponse(
        success=True,
        message="Login successful",
        user={
            "id": user.id,
            "login": user.login,
            "role": user.role,
            "full_name": user.full_name,
        }
    )


@router.post("/logout")
async def logout(
    response: Response,
    session_id: Optional[str] = Cookie(None, alias="session_id"),
    db: Session = Depends(get_db)
):
    """
    –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

    –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ –ë–î –∏ –æ—á–∏—â–∞–µ—Ç cookie
    """
    if session_id:
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –ë–î
        session = db.query(UserSession).filter(
            UserSession.session_id == session_id
        ).first()

        if session:
            db.delete(session)
            db.commit()
            logger.info(f"‚úÖ Logout successful: session {session_id}")

    # –û—á–∏—â–∞–µ–º cookie
    response.delete_cookie(key="session_id")

    return {
        "success": True,
        "message": "Logged out successfully"
    }


@router.get("/me", response_model=CurrentUserResponse)
async def get_current_user_info(
    current_user: User = Depends(require_auth)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    return CurrentUserResponse(
        id=current_user.id,
        login=current_user.login,
        role=current_user.role,
        full_name=current_user.full_name,
    )


@router.get("/check")
async def check_auth(
    current_user: Optional[User] = Depends(get_current_user)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    """
    if current_user:
        return {
            "authenticated": True,
            "user": {
                "id": current_user.id,
                "login": current_user.login,
                "role": current_user.role,
                "full_name": current_user.full_name,
            }
        }
    else:
        return {
            "authenticated": False,
            "user": None
        }


@router.delete("/sessions/cleanup")
async def cleanup_expired_sessions(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_admin)
):
    """
    –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π

    –¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç—ë–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
    deleted = db.query(UserSession).filter(
        UserSession.expires_at < datetime.now()
    ).delete()

    db.commit()

    logger.info(f"üßπ Cleaned up {deleted} expired sessions")

    return {
        "success": True,
        "message": f"Deleted {deleted} expired sessions",
        "deleted_count": deleted
    }
