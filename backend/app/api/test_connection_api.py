"""
Test Connection API
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import logging
import socket
import aiohttp
from typing import Dict, Any

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from pydantic import BaseModel

from app.core.database import get_db
from app.models import Setting
from app.api.auth_api import require_auth
from app.models import User

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/test", tags=["test"])


# ============================================================================
# SCHEMAS
# ============================================================================

class TestResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    success: bool
    message: str
    details: Dict[str, Any] = {}


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def get_setting_value(db: Session, key: str, default: str = "") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
    setting = db.query(Setting).filter(Setting.key == key).first()
    return setting.value if setting and setting.value else default


async def test_http_connection(url: str, username: str = None, password: str = None, timeout: int = 5) -> TestResponse:
    """–¢–µ—Å—Ç HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        auth = aiohttp.BasicAuth(username, password) if username and password else None

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        connector = aiohttp.TCPConnector(ssl=False)

        async with aiohttp.ClientSession(auth=auth, timeout=aiohttp.ClientTimeout(total=timeout), connector=connector) as session:
            async with session.get(url) as response:
                return TestResponse(
                    success=True,
                    message=f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (HTTP {response.status})",
                    details={
                        "status_code": response.status,
                        "url": url,
                        "response_time_ms": int(response.headers.get('X-Response-Time', 0))
                    }
                )
    except aiohttp.ClientError as e:
        return TestResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}",
            details={"error": str(e), "url": url}
        )
    except Exception as e:
        return TestResponse(
            success=False,
            message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
            details={"error": str(e), "url": url}
        )


def test_tcp_connection(host: str, port: int, timeout: int = 5) -> TestResponse:
    """–¢–µ—Å—Ç TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((host, port))
        sock.close()

        if result == 0:
            return TestResponse(
                success=True,
                message=f"–ü—Ä–∏–Ω—Ç–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {host}:{port}",
                details={"host": host, "port": port}
            )
        else:
            return TestResponse(
                success=False,
                message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {host}:{port}",
                details={"host": host, "port": port, "error_code": result}
            )
    except socket.gaierror:
        return TestResponse(
            success=False,
            message=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å hostname: {host}",
            details={"host": host, "error": "DNS resolution failed"}
        )
    except Exception as e:
        return TestResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞: {str(e)}",
            details={"host": host, "port": port, "error": str(e)}
        )


# ============================================================================
# TEST ENDPOINTS
# ============================================================================

@router.post("/printer", response_model=TestResponse)
async def test_printer_connection(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_auth)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–∏–Ω—Ç–µ—Ä—É

    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    printer_ip = get_setting_value(db, "printer_ip", "192.168.1.10")
    printer_port = int(get_setting_value(db, "printer_port", "9100"))

    logger.info(f"üñ®Ô∏è  Testing printer connection: {printer_ip}:{printer_port}")

    result = test_tcp_connection(printer_ip, printer_port, timeout=3)

    if result.success:
        logger.info(f"‚úÖ Printer connection successful")
    else:
        logger.warning(f"‚ùå Printer connection failed: {result.message}")

    return result


@router.post("/storehouse", response_model=TestResponse)
async def test_storehouse_connection(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_auth)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ StoreHouse 5

    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    sh5_url = get_setting_value(db, "sh5_url", "")
    sh5_user = get_setting_value(db, "sh5_user", "")
    sh5_pass = get_setting_value(db, "sh5_pass", "")

    if not sh5_url:
        return TestResponse(
            success=False,
            message="URL StoreHouse 5 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            details={}
        )

    logger.info(f"üè™ Testing StoreHouse 5 connection: {sh5_url}")

    result = await test_http_connection(sh5_url, sh5_user, sh5_pass, timeout=5)

    if result.success:
        logger.info(f"‚úÖ StoreHouse 5 connection successful")
    else:
        logger.warning(f"‚ùå StoreHouse 5 connection failed: {result.message}")

    return result


@router.post("/rkeeper", response_model=TestResponse)
async def test_rkeeper_connection(
    db: Session = Depends(get_db),
    current_user: User = Depends(require_auth)
):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RKeeper

    –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    rk_url = get_setting_value(db, "rkeeper_url", "")
    rk_user = get_setting_value(db, "rkeeper_user", "")
    rk_pass = get_setting_value(db, "rkeeper_pass", "")

    if not rk_url:
        return TestResponse(
            success=False,
            message="URL RKeeper –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            details={}
        )

    logger.info(f"üçΩÔ∏è  Testing RKeeper connection: {rk_url}")

    result = await test_http_connection(rk_url, rk_user, rk_pass, timeout=5)

    if result.success:
        logger.info(f"‚úÖ RKeeper connection successful")
    else:
        logger.warning(f"‚ùå RKeeper connection failed: {result.message}")

    return result
