"""
Orders API - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏
Endpoint –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏–∑ UI
"""

import logging
from typing import List, Optional
from datetime import datetime, timedelta

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from sqlalchemy import desc
from pydantic import BaseModel

from app.core.database import get_db
from app.models import Order, OrderItem, PrintJob

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/orders", tags=["orders"])


# ============================================================================
# SCHEMAS
# ============================================================================

class PrintJobSchema(BaseModel):
    """–°—Ö–µ–º–∞ PrintJob –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    id: int
    status: str
    created_at: datetime
    started_at: Optional[datetime]
    printed_at: Optional[datetime]
    retry_count: int
    error_message: Optional[str]

    class Config:
        from_attributes = True


class OrderItemSchema(BaseModel):
    """–°—Ö–µ–º–∞ OrderItem –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    id: int
    rk_code: str
    name: str
    uni: int
    quantity: int
    price: float
    modifier_id: Optional[str]
    modifier_name: Optional[str]
    created_at: datetime
    print_jobs: List[PrintJobSchema]

    class Config:
        from_attributes = True


class OrderSchema(BaseModel):
    """–°—Ö–µ–º–∞ Order –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
    id: int
    visit_id: str
    order_ident: str
    table_code: str
    status: str
    created_at: datetime
    updated_at: datetime
    items: List[OrderItemSchema]

    class Config:
        from_attributes = True


class OrderListItemSchema(BaseModel):
    """–°—Ö–µ–º–∞ Order –¥–ª—è —Å–ø–∏—Å–∫–∞ (–±–µ–∑ items, –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)"""
    id: int
    visit_id: str
    order_ident: str
    table_code: str
    status: str
    created_at: datetime
    updated_at: datetime
    items_count: int
    jobs_count: int
    jobs_done: int
    jobs_failed: int

    class Config:
        from_attributes = True


class ReprintRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–µ—á–∞—Ç—å"""
    order_item_id: int
    quantity: Optional[int] = None  # –ï—Å–ª–∏ None - –ø–µ—á–∞—Ç–∞–µ–º –≤—Å–µ –ø–æ—Ä—Ü–∏–∏


# ============================================================================
# ENDPOINTS
# ============================================================================

@router.get("/", response_model=List[OrderListItemSchema])
async def get_orders(
    status: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É: NOT_PRINTED, PRINTING, DONE, FAILED"),
    table_code: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–æ–ª—É"),
    limit: int = Query(100, description="–ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤"),
    offset: int = Query(0, description="–°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤

    –§–∏–ª—å—Ç—Ä—ã:
    - status: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (NOT_PRINTED, PRINTING, DONE, FAILED)
    - table_code: –ö–æ–¥ —Å—Ç–æ–ª–∞
    - limit/offset: –ü–∞–≥–∏–Ω–∞—Ü–∏—è

    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    """
    query = db.query(Order)

    # –§–∏–ª—å—Ç—Ä—ã
    if status:
        query = query.filter(Order.status == status)

    if table_code:
        query = query.filter(Order.table_code == table_code)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    query = query.order_by(desc(Order.created_at))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    query = query.limit(limit).offset(offset)

    orders = query.all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    result = []
    for order in orders:
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É jobs
        all_jobs = []
        for item in order.items:
            all_jobs.extend(item.print_jobs)

        jobs_count = len(all_jobs)
        jobs_done = len([j for j in all_jobs if j.status == "DONE"])
        jobs_failed = len([j for j in all_jobs if j.status == "FAILED"])

        result.append(OrderListItemSchema(
            id=order.id,
            visit_id=order.visit_id,
            order_ident=order.order_ident,
            table_code=order.table_code,
            status=order.status,
            created_at=order.created_at,
            updated_at=order.updated_at,
            items_count=len(order.items),
            jobs_count=jobs_count,
            jobs_done=jobs_done,
            jobs_failed=jobs_failed,
        ))

    return result


@router.get("/{order_id}", response_model=OrderSchema)
async def get_order(
    order_id: int,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ

    –í–∫–ª—é—á–∞–µ—Ç:
    - –í—Å–µ items
    - –í—Å–µ print jobs –¥–ª—è –∫–∞–∂–¥–æ–≥–æ item
    """
    order = db.query(Order).filter(Order.id == order_id).first()

    if not order:
        raise HTTPException(status_code=404, detail="Order not found")

    return order


@router.delete("/{order_id}")
async def delete_order(
    order_id: int,
    db: Session = Depends(get_db)
):
    """
    –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑

    –í–ù–ò–ú–ê–ù–ò–ï: –ö–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ OrderItem –∏ PrintJob

    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    - –û—Ç–º–µ–Ω–∞ –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    """
    order = db.query(Order).filter(Order.id == order_id).first()

    if not order:
        raise HTTPException(status_code=404, detail="Order not found")

    # –£–¥–∞–ª—è–µ–º (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è items –∏ jobs)
    db.delete(order)
    db.commit()

    logger.info(f"üóëÔ∏è  Deleted order #{order_id}")

    return {"success": True, "message": f"Order #{order_id} deleted"}


@router.post("/{order_id}/cancel")
async def cancel_order(
    order_id: int,
    db: Session = Depends(get_db)
):
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑

    –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ QUEUED print jobs –∏ –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ CANCELLED
    """
    order = db.query(Order).filter(Order.id == order_id).first()

    if not order:
        raise HTTPException(status_code=404, detail="Order not found")

    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ QUEUED jobs
    cancelled_count = 0
    for item in order.items:
        for job in item.print_jobs:
            if job.status == "QUEUED":
                job.status = "CANCELLED"
                cancelled_count += 1

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.status = "CANCELLED"
    db.commit()

    logger.info(f"‚ùå Cancelled order #{order_id}, jobs cancelled: {cancelled_count}")

    return {
        "success": True,
        "message": f"Order #{order_id} cancelled",
        "jobs_cancelled": cancelled_count
    }


@router.post("/reprint", response_model=dict)
async def reprint_item(
    request: ReprintRequest,
    db: Session = Depends(get_db)
):
    """
    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–µ—á–∞—Ç—å item

    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ PrintJob –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ OrderItem

    Args:
        order_item_id: ID order item
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (–µ—Å–ª–∏ None - –≤—Å–µ –ø–æ—Ä—Ü–∏–∏ item)
    """
    from app.core.database import dishes_db
    from app.models import Template
    from app.services.printer.tspl_renderer import TSPLRenderer

    # –ü–æ–ª—É—á–∞–µ–º OrderItem
    order_item = db.query(OrderItem).filter(OrderItem.id == request.order_item_id).first()

    if not order_item:
        raise HTTPException(status_code=404, detail="OrderItem not found")

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
    quantity = request.quantity if request.quantity is not None else order_item.quantity

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
    dish = dishes_db.get_dish_by_rk_code(order_item.rk_code)
    if not dish:
        raise HTTPException(
            status_code=404,
            detail=f"Dish {order_item.rk_code} not found in database"
        )

    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    template = db.query(Template).filter(Template.is_default == True).first()
    if not template:
        raise HTTPException(status_code=500, detail="Default template not found")

    renderer = TSPLRenderer(template.config)

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ PrintJob
    jobs_created = 0

    # –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏
    for i in range(quantity):
        tspl = renderer.render({
            "name": dish["name"],
            "rk_code": dish["rkeeper_code"],
            "weight_g": dish["weight_g"],
            "calories": dish["calories"],
            "protein": dish["protein"],
            "fat": dish["fat"],
            "carbs": dish["carbs"],
            "ingredients": dish["ingredients"],
            "label_type": "MAIN",
        })

        job = PrintJob(
            order_item_id=order_item.id,
            tspl_data=tspl,
            status="QUEUED",
            retry_count=0,
            max_retries=3,
        )
        db.add(job)
        jobs_created += 1

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏
    if dish.get("has_extra_labels") and dish.get("extra_labels"):
        for extra in dish["extra_labels"]:
            for i in range(quantity):
                tspl = renderer.render({
                    "name": extra["extra_dish_name"],
                    "rk_code": dish["rkeeper_code"],
                    "weight_g": extra["extra_dish_weight_g"],
                    "calories": extra["extra_dish_calories"],
                    "protein": extra.get("extra_dish_protein", 0),
                    "fat": extra.get("extra_dish_fat", 0),
                    "carbs": extra.get("extra_dish_carbs", 0),
                    "ingredients": [],
                    "label_type": "EXTRA",
                })

                job = PrintJob(
                    order_item_id=order_item.id,
                    tspl_data=tspl,
                    status="QUEUED",
                    retry_count=0,
                    max_retries=3,
                )
                db.add(job)
                jobs_created += 1

    db.commit()

    logger.info(f"üîÑ Reprint: order_item #{order_item.id}, jobs created: {jobs_created}")

    return {
        "success": True,
        "message": f"Created {jobs_created} print jobs for reprint",
        "jobs_created": jobs_created
    }


@router.delete("/cleanup")
async def cleanup_old_orders(
    days: int = Query(7, description="–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π"),
    db: Session = Depends(get_db)
):
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤

    –£–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π

    –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
    """
    cutoff_date = datetime.now() - timedelta(days=days)

    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã
    old_orders = db.query(Order).filter(Order.created_at < cutoff_date).all()

    count = len(old_orders)

    # –£–¥–∞–ª—è–µ–º
    for order in old_orders:
        db.delete(order)

    db.commit()

    logger.info(f"üßπ Cleanup: deleted {count} orders older than {days} days")

    return {
        "success": True,
        "message": f"Deleted {count} orders older than {days} days",
        "deleted_count": count
    }
