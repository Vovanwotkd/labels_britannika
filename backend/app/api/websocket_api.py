"""
WebSocket API
Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è UI
"""

import logging
import json
from typing import Optional

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Query, Depends
from sqlalchemy.orm import Session

from app.core.database import get_db
from app.services.websocket.manager import manager

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/ws", tags=["websocket"])


# ============================================================================
# ENDPOINTS
# ============================================================================

@router.websocket("/")
async def websocket_endpoint(
    websocket: WebSocket,
    user_id: Optional[str] = Query(None),
    room: Optional[str] = Query("orders"),
):
    """
    WebSocket endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

    Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - room: –ö–æ–º–Ω–∞—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "orders")

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–Ω–∞—Ç—ã:
    - "orders" - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    - "printer" - —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    - "all" - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è

    –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:
    ```json
    {
        "type": "order_update",
        "event": "new_order",
        "order_id": 123,
        "data": {...}
    }
    ```

    ```json
    {
        "type": "print_job_update",
        "job_id": 456,
        "status": "DONE",
        "order_item_id": 789
    }
    ```

    ```json
    {
        "type": "printer_status",
        "online": true,
        "error": null
    }
    ```

    –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:
    ```json
    {
        "action": "ping"
    }
    ```

    ```json
    {
        "action": "join_room",
        "room": "printer"
    }
    ```

    ```json
    {
        "action": "leave_room",
        "room": "printer"
    }
    ```
    """
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await manager.connect(websocket, user_id=user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–Ω–∞—Ç—É
    if room:
        manager.join_room(websocket, room)

    try:
        while True:
            # –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()

            try:
                message = json.loads(data)
                await handle_client_message(websocket, message)
            except json.JSONDecodeError:
                await manager.send_personal_message(websocket, {
                    "type": "error",
                    "message": "Invalid JSON"
                })
            except Exception as e:
                logger.error(f"‚ùå Error handling client message: {e}", exc_info=True)
                await manager.send_personal_message(websocket, {
                    "type": "error",
                    "message": str(e)
                })

    except WebSocketDisconnect:
        manager.disconnect(websocket)
        logger.info(f"üîå WebSocket disconnected: user={user_id}")


async def handle_client_message(websocket: WebSocket, message: dict):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞

    Args:
        websocket: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        message: Parsed JSON message
    """
    action = message.get("action")

    if action == "ping":
        # Pong
        await manager.send_personal_message(websocket, {
            "type": "pong",
            "timestamp": None,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å timestamp
        })

    elif action == "join_room":
        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        room = message.get("room")
        if room:
            manager.join_room(websocket, room)
            await manager.send_personal_message(websocket, {
                "type": "room_joined",
                "room": room,
            })
        else:
            await manager.send_personal_message(websocket, {
                "type": "error",
                "message": "Room name required"
            })

    elif action == "leave_room":
        # –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
        room = message.get("room")
        if room:
            manager.leave_room(websocket, room)
            await manager.send_personal_message(websocket, {
                "type": "room_left",
                "room": room,
            })
        else:
            await manager.send_personal_message(websocket, {
                "type": "error",
                "message": "Room name required"
            })

    elif action == "get_stats":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await manager.send_personal_message(websocket, {
            "type": "stats",
            "total_connections": manager.get_connections_count(),
            "rooms": {
                "orders": manager.get_room_size("orders"),
                "printer": manager.get_room_size("printer"),
            }
        })

    else:
        await manager.send_personal_message(websocket, {
            "type": "error",
            "message": f"Unknown action: {action}"
        })


# ============================================================================
# HELPER ENDPOINT (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# ============================================================================

@router.post("/test/broadcast")
async def test_broadcast(message: str = "Test message", room: Optional[str] = None):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è broadcasting

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è broadcast
        room: –ö–æ–º–Ω–∞—Ç–∞ (–µ—Å–ª–∏ None - broadcast –≤—Å–µ–º)
    """
    payload = {
        "type": "test",
        "message": message,
    }

    if room:
        await manager.broadcast_to_room(room, payload)
        return {
            "status": "ok",
            "message": f"Broadcasted to room '{room}'",
            "clients": manager.get_room_size(room)
        }
    else:
        await manager.broadcast(payload)
        return {
            "status": "ok",
            "message": "Broadcasted to all clients",
            "clients": manager.get_connections_count()
        }
