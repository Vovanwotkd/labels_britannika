"""
Britannica Labels - FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª, —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
"""

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from app.core.config import settings
from app.core.database import init_db, SessionLocal
from app.services.printer.queue_worker import PrintQueueWorker, set_worker
from app.services.sync_orders import sync_orders_with_rkeeper

# ============================================================================
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ============================================================================

logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


# ============================================================================
# LIFESPAN (startup/shutdown —Å–æ–±—ã—Ç–∏—è)
# ============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifespan context manager –¥–ª—è FastAPI
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # STARTUP
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {settings.APP_NAME} v{settings.APP_VERSION}")
    logger.info(f"üåç Environment: {settings.ENVIRONMENT}")
    logger.info(f"üïê Timezone: {settings.TIMEZONE}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()

    # –ó–∞–ø—É—Å–∫ print queue worker
    logger.info("üñ®Ô∏è  –ó–∞–ø—É—Å–∫ print queue worker...")
    worker = PrintQueueWorker(
        printer_host=settings.PRINTER_IP,
        printer_port=settings.PRINTER_PORT
    )
    set_worker(worker)
    await worker.start()

    # –ó–∞–ø—É—Å–∫ background tasks (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å RKeeper)
    logger.info("‚è∞ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
    scheduler = AsyncIOScheduler()

    # –ó–∞–¥–∞—á–∞: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å RKeeper –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    async def sync_task():
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å RKeeper"""
        db = SessionLocal()
        try:
            result = await sync_orders_with_rkeeper(db)
            if result["success"]:
                logger.debug(
                    f"üîÑ Sync completed: "
                    f"created={result['orders_created']}, "
                    f"updated={result['orders_updated']}"
                )
            else:
                logger.warning(f"‚ö†Ô∏è  Sync failed: {result['message']}")
        except Exception as e:
            logger.error(f"‚ùå Sync task error: {e}", exc_info=True)
        finally:
            db.close()

    scheduler.add_job(
        sync_task,
        'interval',
        minutes=1,
        id='sync_orders',
        name='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å RKeeper',
        replace_existing=True
    )
    scheduler.start()
    logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)")

    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    yield

    # SHUTDOWN
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # Graceful shutdown scheduler
    if scheduler:
        scheduler.shutdown(wait=False)
        logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    # Graceful shutdown print queue
    if worker:
        await worker.stop()

    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


# ============================================================================
# FASTAPI APP
# ============================================================================

app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="–°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ Britannica Project",
    lifespan=lifespan,
    debug=settings.DEBUG,
)


# ============================================================================
# CORS (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ frontend)
# ============================================================================

app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173",  # Vite dev server
        "http://localhost:3000",  # React dev server (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
        "http://labels.local",    # Production
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ============================================================================
# ROUTES
# ============================================================================

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "app": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "status": "online",
        "environment": settings.ENVIRONMENT,
    }


@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {
        "status": "healthy",
        "database": "connected",  # TODO: —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
        "printer": "unknown",     # TODO: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    }


# ============================================================================
# API ROUTERS
# ============================================================================

from app.api import print_api, webhook_api, orders_api, websocket_api, auth_api, settings_api, test_connection_api, rkeeper_api, templates_api, sync_api, printers_api, departments_api

app.include_router(print_api.router)
app.include_router(webhook_api.router)
app.include_router(orders_api.router)
app.include_router(websocket_api.router)
app.include_router(auth_api.router)
app.include_router(settings_api.router)
app.include_router(test_connection_api.router)
app.include_router(rkeeper_api.router)
app.include_router(templates_api.router)
app.include_router(departments_api.router)
app.include_router(sync_api.router)
app.include_router(printers_api.router)

# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
# from app.api import templates, users
# app.include_router(templates.router)
# app.include_router(users.router)


# ============================================================================
# –ó–ê–ü–£–°–ö (–¥–ª—è dev —Ä–µ–∂–∏–º–∞)
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(
        "app.main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower(),
    )
