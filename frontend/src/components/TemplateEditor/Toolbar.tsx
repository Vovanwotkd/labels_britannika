/**
 * Toolbar Component
 * –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */

import { ElementType } from './types'

interface ToolbarProps {
  onAddElement: (type: ElementType) => void
}

const tools = [
  { type: 'logo' as ElementType, icon: 'üñºÔ∏è', label: '–õ–æ–≥–æ—Ç–∏–ø' },
  { type: 'text' as ElementType, icon: 'üìù', label: '–¢–µ–∫—Å—Ç' },
  { type: 'composition' as ElementType, icon: 'üìã', label: '–°–æ—Å—Ç–∞–≤' },
  { type: 'bju' as ElementType, icon: 'ü•ó', label: '–ë–ñ–£' },
  { type: 'weight' as ElementType, icon: '‚öñÔ∏è', label: '–í–µ—Å' },
  { type: 'datetime' as ElementType, icon: 'üìÖ', label: '–î–∞—Ç–∞/–í—Ä–µ–º—è' },
  { type: 'shelf_life' as ElementType, icon: '‚è∞', label: '–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏' },
]

export default function Toolbar({ onAddElement }: ToolbarProps) {
  return (
    <div className="p-4 bg-gray-50 border-b">
      <h3 className="text-sm font-semibold text-gray-700 mb-3">
        –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç:
      </h3>
      <div className="grid grid-cols-2 gap-2">
        {tools.map((tool) => (
          <button
            key={tool.type}
            onClick={() => onAddElement(tool.type)}
            className="flex items-center gap-2 px-3 py-2 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 hover:border-primary-500 transition-colors"
          >
            <span className="text-lg">{tool.icon}</span>
            <span>{tool.label}</span>
          </button>
        ))}
      </div>
    </div>
  )
}
