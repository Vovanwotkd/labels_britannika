/**
 * Order Card Component - New Design
 * –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ 220√ó220px —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å—Ç–∞—Ç—É—Å–∞
 */

import { useState } from 'react'
import type { OrderListItem } from '../types'

interface OrderCardProps {
  order: OrderListItem
  onPrintAll: () => void
  onOpenDetails: () => void
}

export default function OrderCard({ order, onPrintAll, onOpenDetails }: OrderCardProps) {
  const [isAnimating, setIsAnimating] = useState(false)

  // –ú–∞–ø–∏–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ —Ü–≤–µ—Ç–∞
  const getStatusColor = (status: string) => {
    if (status === 'DONE') {
      return 'bg-[#D8F7D0]' // –ó–µ–ª—ë–Ω—ã–π - –Ω–∞–ø–µ—á–∞—Ç–∞–Ω
    } else if (status === 'FAILED') {
      return 'bg-[#FFD6D6]' // –ö—Ä–∞—Å–Ω—ã–π - –æ—à–∏–±–∫–∞
    } else {
      // NOT_PRINTED, PRINTING - –≥–æ–ª—É–±–æ–π (–Ω–æ–≤—ã–π)
      return 'bg-[#D6E8FF]'
    }
  }

  // –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = (status: string) => {
    if (status === 'DONE') {
      return '‚úì' // –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö
    } else if (status === 'FAILED') {
      return '‚úï' // –ö—Ä–µ—Å—Ç–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
    } else {
      return 'üçΩÔ∏è' // –ë–ª—é–¥–æ –¥–ª—è –Ω–æ–≤—ã—Ö
    }
  }

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—á–∞—Ç–∏
  const progressPercent = order.jobs_count > 0
    ? Math.round((order.jobs_done / order.jobs_count) * 100)
    : 0

  const isPrinting = order.status === 'PRINTING'

  // –ö–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É - –ø–µ—á–∞—Ç–∞—Ç—å –≤—Å–µ
  const handleCardClick = () => {
    setIsAnimating(true)
    onPrintAll()
    // –ê–Ω–∏–º–∞—Ü–∏—è –º–∏–≥–∞–Ω–∏—è 500–º—Å
    setTimeout(() => setIsAnimating(false), 500)
  }

  // –ö–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å" - –Ω–µ –¥–æ–ª–∂–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –ø–µ—á–∞—Ç—å
  const handleOpenClick = (e: React.MouseEvent) => {
    e.stopPropagation()
    onOpenDetails()
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
  const formatSum = (sum: number | null) => {
    if (!sum) return '0 ‚ÇΩ'
    return `${sum.toFixed(0)} ‚ÇΩ`
  }

  return (
    <div
      onClick={handleCardClick}
      className={`
        relative w-[220px] h-[220px] rounded-lg shadow-md
        flex flex-col items-center justify-between p-4
        cursor-pointer transition-all duration-300
        hover:shadow-xl hover:scale-105
        ${getStatusColor(order.status)}
        ${isAnimating ? 'animate-pulse' : ''}
      `}
    >
      {/* –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ */}
      <div className="text-4xl mb-2">
        {getStatusIcon(order.status)}
      </div>

      {/* –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (visit_id) */}
      <div className="text-2xl font-bold text-gray-900 mb-1">
        #{order.visit_id}
      </div>

      {/* –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ */}
      <div className="text-xl font-semibold text-gray-800 mb-2">
        {formatSum(order.order_total)}
      </div>

      {/* –°—Ç–æ–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ */}
      <div className="text-sm text-gray-700 text-center mb-3">
        –°—Ç–æ–ª {order.table_code} ‚Ä¢ {order.items_count} –±–ª—é–¥{order.items_count !== 1 && '–∞'}
      </div>

      {/* –ü–æ–ª–æ—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –ø–µ—á–∞—Ç–∞–µ—Ç—Å—è) */}
      {isPrinting && (
        <div className="w-full h-1 bg-gray-300 rounded-full overflow-hidden mb-3">
          <div
            className="h-full bg-blue-500 transition-all duration-300"
            style={{ width: `${progressPercent}%` }}
          />
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å" */}
      <button
        onClick={handleOpenClick}
        className="
          w-[80%] py-2 px-4
          bg-white/80 hover:bg-white
          text-gray-800 text-sm font-medium
          rounded-md shadow-sm
          transition-all duration-200
          flex items-center justify-center gap-2
        "
      >
        –û—Ç–∫—Ä—ã—Ç—å
        <span className="text-gray-600">‚Üí</span>
      </button>
    </div>
  )
}
